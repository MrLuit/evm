{"version":3,"sources":["webpack://EVM/webpack/bootstrap","webpack://EVM/./src/utils/stringify.ts","webpack://EVM/./node_modules/big-integer/BigInteger.js","webpack://EVM/./src/opcodes/mload.ts","webpack://EVM/./src/opcodes/mod.ts","webpack://EVM/./src/opcodes/add.ts","webpack://EVM/./src/opcodes/mul.ts","webpack://EVM/./src/opcodes/sub.ts","webpack://EVM/./src/opcodes/shl.ts","webpack://EVM/./src/opcodes/sar.ts","webpack://EVM/./src/opcodes/lt.ts","webpack://EVM/./src/opcodes/gt.ts","webpack://EVM/./src/opcodes/jumpi.ts","webpack://EVM/./src/utils/stringifyInstructions.ts","webpack://EVM/./src/opcodes.ts","webpack://EVM/./src/index.ts","webpack://EVM/./src/classes/tx.class.ts","webpack://EVM/(webpack)/buildin/module.js","webpack://EVM/./src/classes/evm.class.ts","webpack://EVM/./src/utils/opcodes.ts","webpack://EVM/./src/opcodes/stop.ts","webpack://EVM/./src/opcodes/div.ts","webpack://EVM/./src/opcodes/addmod.ts","webpack://EVM/./src/opcodes/mulmod.ts","webpack://EVM/./src/opcodes/exp.ts","webpack://EVM/./src/opcodes/signextend.ts","webpack://EVM/./src/opcodes/eq.ts","webpack://EVM/./src/opcodes/iszero.ts","webpack://EVM/./src/opcodes/and.ts","webpack://EVM/./src/opcodes/or.ts","webpack://EVM/./src/opcodes/xor.ts","webpack://EVM/./src/opcodes/not.ts","webpack://EVM/./src/opcodes/byte.ts","webpack://EVM/./src/opcodes/shr.ts","webpack://EVM/./src/opcodes/sha3.ts","webpack://EVM/./src/opcodes/address.ts","webpack://EVM/./src/opcodes/balance.ts","webpack://EVM/./src/opcodes/origin.ts","webpack://EVM/./src/opcodes/caller.ts","webpack://EVM/./src/opcodes/callvalue.ts","webpack://EVM/./src/opcodes/calldataload.ts","webpack://EVM/./src/opcodes/calldatasize.ts","webpack://EVM/./src/opcodes/calldatacopy.ts","webpack://EVM/./src/opcodes/codesize.ts","webpack://EVM/./src/opcodes/codecopy.ts","webpack://EVM/./src/opcodes/gasprice.ts","webpack://EVM/./src/opcodes/extcodesize.ts","webpack://EVM/./src/opcodes/extcodecopy.ts","webpack://EVM/./src/opcodes/returndatasize.ts","webpack://EVM/./src/opcodes/returndatacopy.ts","webpack://EVM/./src/opcodes/extcodehash.ts","webpack://EVM/./src/opcodes/blockhash.ts","webpack://EVM/./src/opcodes/coinbase.ts","webpack://EVM/./src/opcodes/timestamp.ts","webpack://EVM/./src/opcodes/number.ts","webpack://EVM/./src/opcodes/difficulty.ts","webpack://EVM/./src/opcodes/gaslimit.ts","webpack://EVM/./src/opcodes/pop.ts","webpack://EVM/./src/opcodes/mstore.ts","webpack://EVM/./src/opcodes/sload.ts","webpack://EVM/./src/opcodes/sstore.ts","webpack://EVM/./src/opcodes/jump.ts","webpack://EVM/./src/opcodes/pc.ts","webpack://EVM/./src/opcodes/msize.ts","webpack://EVM/./src/opcodes/gas.ts","webpack://EVM/./src/opcodes/jumpdest.ts","webpack://EVM/./src/opcodes/push.ts","webpack://EVM/./src/opcodes/dup.ts","webpack://EVM/./src/opcodes/swap.ts","webpack://EVM/./src/opcodes/log.ts","webpack://EVM/./src/opcodes/create.ts","webpack://EVM/./src/opcodes/call.ts","webpack://EVM/./src/opcodes/callcode.ts","webpack://EVM/./src/opcodes/return.ts","webpack://EVM/./src/utils/hex.ts","webpack://EVM/./src/opcodes/delegatecall.ts","webpack://EVM/./src/opcodes/create2.ts","webpack://EVM/./src/opcodes/staticcall.ts","webpack://EVM/./src/opcodes/revert.ts","webpack://EVM/./src/opcodes/invalid.ts","webpack://EVM/./src/opcodes/selfdestruct.ts","webpack://EVM/./src/utils/stringifyEvents.ts","webpack://EVM/./src/utils/stringifyStructs.ts","webpack://EVM/./src/utils/stringifyMappings.ts","webpack://EVM/./src/utils/stringifyVariables.ts","webpack://EVM/./src/utils/stringifyFunctions.ts","webpack://EVM/./src/classes/stack.class.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigNumber","default","item","isInstance","toString","wrapped","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","bigInt","undefined","BASE","LOG_BASE","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","BigInt","pow","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","sign","this","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","trim","length","compareAbs","createArray","x","Array","truncate","ceil","add","a","b","sum","l_a","l_b","carry","base","push","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractAny","subtractSmall","multiplyLong","product","a_i","j","multiplySmall","shiftLeft","concat","multiplyKaratsuba","y","max","slice","ac","bd","abcd","useKaratsuba","l1","l2","multiplySmallAndArray","square","divMod1","quotientDigit","shift","q","result","divisorMostSignificantDigit","lambda","remainder","divisor","divModSmall","divMod2","guess","xlen","highx","highy","check","part","unshift","reverse","quotient","divModAny","self","Error","negate","abs","comparison","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","modPow","plus","minus","small","multiply","times","_multiplyBySmall","divmod","over","eval","isNegative","exp","isZero","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","randBetween","modInv","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","String","shiftRight","remQuo","and","or","xor","LOBMASK_I","LOBMASK_BI","roughLOB","integerLogarithm","tmp","e","min","gcd","lcm","low","range","random","digits","toBase","restricted","top","digit","fromArray","text","toLowerCase","absBase","alphabetValues","start","parseBaseFromArray","val","stringify","apply","map","valueOf","neg","Number","out","left","toBaseString","join","parseStringValue","split","decimalPlace","indexOf","test","parseNumberValue","toArray","str","toJSON","parseInt","minusOne","stringify_1","MLOAD","[object Object]","location","opcode","state","memoryLocation","stack","pop","memory","MOD","right","ADD","type","MUL","SUB","SHL","SAR","LT","equal","GT","functionHashes","updateCallDataLoad","types","argNumber","findReturns","returns","items","deepReturns","TopLevelFunction","hash","gasUsed","payable","visibility","constant","label","REQUIRE","condition","functionName","argumentTypes","replace","substr","forEach","every","returnItem","Variable","JUMPI","ifTrue","ifFalse","skipped","valid","true","false","console","jumpLocation","jumpCondition","opcodes","getOpcodes","conditions","jumpLocationData","find","pc","jumpIndex","jumps","instructions","halted","trueClone","clone","trueCloneTree","parse","falseClone","falseCloneTree","memoryLength","outputLength","gas","throwOnFail","functions","functionClone","functionCloneTree","fullFunction","mappings","structlocation","structs","includes","variables","stringifyInstructions","instructionTree","indentation","instructionLines","instruction","falseInstructions","filter","debugLevel","repeat","elseOrElseIf","startsWith","STOP","DIV","SDIV","SMOD","ADDMOD","MULMOD","EXP","SIGNEXTEND","SLT","SGT","EQ","ISZERO","AND","OR","XOR","NOT","BYTE","SHR","SHA3","ADDRESS","BALANCE","ORIGIN","CALLER","CALLVALUE","CALLDATALOAD","CALLDATASIZE","CALLDATACOPY","CODESIZE","CODECOPY","GASPRICE","EXTCODESIZE","EXTCODECOPY","RETURNDATASIZE","RETURNDATACOPY","EXTCODEHASH","BLOCKHASH","COINBASE","TIMESTAMP","NUMBER","DIFFICULTY","GASLIMIT","POP","MSTORE","MSTORE8","SLOAD","SSTORE","JUMP","PC","MSIZE","GAS","JUMPDEST","PUSH1","PUSH2","PUSH3","PUSH4","PUSH5","PUSH6","PUSH7","PUSH8","PUSH9","PUSH10","PUSH11","PUSH12","PUSH13","PUSH14","PUSH15","PUSH16","PUSH17","PUSH18","PUSH19","PUSH20","PUSH21","PUSH22","PUSH23","PUSH24","PUSH25","PUSH26","PUSH27","PUSH28","PUSH29","PUSH30","PUSH31","PUSH32","DUP1","DUP2","DUP3","DUP4","DUP5","DUP6","DUP7","DUP8","DUP9","DUP10","DUP11","DUP12","DUP13","DUP14","DUP15","DUP16","SWAP1","SWAP2","SWAP3","SWAP4","SWAP5","SWAP6","SWAP7","SWAP8","SWAP9","SWAP10","SWAP11","SWAP12","SWAP13","SWAP14","SWAP15","SWAP16","LOG0","LOG1","LOG2","LOG3","LOG4","CREATE","CALL","CALLCODE","RETURN","DELEGATECALL","CREATE2","STATICCALL","REVERT","INVALID","SELFDESTRUCT","codes","0","1","2","3","4","5","6","7","8","9","10","11","16","17","18","19","20","21","22","23","24","25","26","27","28","29","32","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","80","81","82","83","84","85","86","87","88","89","90","91","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","240","241","242","243","244","245","250","253","254","255","names","assign","_functions","_events","_functionHashes","_eventHashes","tx_class_1","Transaction","evm_class_1","EVM","events","eventHashes","__export","parseSingle","data","Buffer","from","substring","transactionObject","blockHash","blockNumber","gasPrice","input","to","functionHash","getFunctionHash","rawFunction","getFunction","match","descriptive","functionArguments","getRawArguments","rawFunctionArguments","functionArgumentType","functionArgument","webpackPolyfill","deprecate","paths","children","opcodes_1","stringifyEvents_1","stringifyStructs_1","stringifyMappings_1","stringifyVariables_1","stringifyFunctions_1","stringifyInstructions_1","stack_class_1","opcodes_2","code","storage","layer","index","currentOp","pushDataLength","pushData","Set","currentOpcode","getBytecode","abi","keys","matches","exec","inputs","full","reset","getEvents","getFunctions","stop_1","add_1","mul_1","sub_1","div_1","mod_1","addmod_1","mulmod_1","exp_1","signextend_1","lt_1","gt_1","eq_1","iszero_1","and_1","or_1","xor_1","not_1","byte_1","shl_1","shr_1","sar_1","sha3_1","address_1","balance_1","origin_1","caller_1","callvalue_1","calldataload_1","calldatasize_1","calldatacopy_1","codesize_1","codecopy_1","gasprice_1","extcodesize_1","extcodecopy_1","returndatasize_1","returndatacopy_1","extcodehash_1","blockhash_1","coinbase_1","timestamp_1","number_1","difficulty_1","gaslimit_1","pop_1","mload_1","mstore_1","sload_1","sstore_1","jump_1","jumpi_1","pc_1","msize_1","gas_1","jumpdest_1","push_1","dup_1","swap_1","log_1","create_1","call_1","callcode_1","return_1","delegatecall_1","create2_1","staticcall_1","revert_1","invalid_1","selfdestruct_1","SIG","size","position","memoryStart","address","startLocation","copyLength","returnDataPosition","returnDataSize","memoryPosition","number","storeLocation","storeData","parseMapping","item2","MappingLoad","count","mappingName","mappingItems","mappingLocation","mappingItem","mappingParts","values","MappingStore","variableName","bad","duplicateLocation","duplicate","swapLocation","swap","LOG","topics","eventName","topicsCount","eventTopic","indexedCount","anonymous","outputStart","hex_1","static","hex2a","hexx","hex","fromCharCode","isHex","h","pad32","pieces","stringLength","isNaN","stateEvents","stateEventValues","output","event","eventArguments","stateEvent","mapping","struct","stringifyMapping","mappingKey","mappingValue","deepMapping","mappingChild","mappingChild2","variable","functionInstance","fullFunctionName","fullFunctionArguments","Stack","elements","secondPosition","firstValue","secondValue"],"mappings":"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","file":"EVM.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","import * as BigNumber from '../../node_modules/big-integer';\n\nexport default (item: any) => {\n    if (BigNumber.isInstance(item)) {\n        return item.toString(16);\n    } else if (!item.wrapped) {\n        return item.toString();\n    } else {\n        return '(' + item.toString() + ')';\n    }\n};\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    var pow;\r\n    if (supportsNativeBigInt) {\r\n        // forced to use eval because ** is a syntax error on pre-ECMAScript2017 environments.\r\n        pow = eval(\"(a,b)=>a**b\");\r\n    }\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        if (b === BigInt(0)) return Integer[1];\r\n        if (a === BigInt(0)) return Integer[0];\r\n        if (a === BigInt(1)) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(BigInt(0));\r\n        return new NativeBigInt(pow(a, b));\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2)));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(Math.random() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(Math.random() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define(\"big-integer\", [], function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class MLOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n\n    constructor(location: any) {\n        this.name = 'MLOAD';\n        this.wrapped = true;\n        this.location = location;\n    }\n\n    toString() {\n        return 'memory[' + stringify(this.location) + ']';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    if (BigNumber.isInstance(memoryLocation) && memoryLocation.toJSNumber() in state.memory) {\n        state.stack.push(state.memory[memoryLocation.toJSNumber()]);\n    } else {\n        state.stack.push(new MLOAD(memoryLocation));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class MOD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'MOD';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' % ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.mod(right));\n    } else {\n        state.stack.push(new MOD(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class ADD {\n    readonly name: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'ADD';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' + ' + stringify(this.right);\n    }\n\n    get type() {\n        if (this.left.type === this.right.type) {\n            return this.left.type;\n        } else if (!this.left.type && this.right.type) {\n            return this.right.type;\n        } else if (!this.right.type && this.left.type) {\n            return this.left.type;\n        } else {\n            return false;\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.add(right));\n    } else if (BigNumber.isInstance(left) && left.isZero()) {\n        state.stack.push(right);\n    } else if (BigNumber.isInstance(right) && right.isZero()) {\n        state.stack.push(left);\n    } else {\n        state.stack.push(new ADD(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class MUL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'MUL';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' * ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.multiply(right));\n    } else if (\n        (BigNumber.isInstance(left) && left.isZero()) ||\n        (BigNumber.isInstance(right) && right.isZero())\n    ) {\n        state.stack.push(BigNumber(0));\n    } else {\n        state.stack.push(new MUL(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SUB {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SUB';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' - ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.subtract(right));\n    } else {\n        state.stack.push(new SUB(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SHL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SHL';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' << ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.shiftLeft(right));\n    } else {\n        state.stack.push(new SHL(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SAR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SAR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' >> ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.shiftRight(right));\n    } else {\n        state.stack.push(new SAR(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class LT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n    readonly equal: boolean;\n\n    constructor(left: any, right: any, equal: boolean = false) {\n        this.name = 'LT';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n        this.equal = equal;\n    }\n\n    toString() {\n        if (this.equal) {\n            return stringify(this.left) + ' <= ' + stringify(this.right);\n        } else {\n            return stringify(this.left) + ' < ' + stringify(this.right);\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(BigNumber(left.lesser(right) === true ? 1 : 0));\n    } else {\n        state.stack.push(new LT(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class GT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n    readonly equal: boolean;\n\n    constructor(left: any, right: any, equal: boolean = false) {\n        this.name = 'GT';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n        this.equal = equal;\n    }\n\n    toString() {\n        if (this.equal) {\n            return stringify(this.left) + ' >= ' + stringify(this.right);\n        } else {\n            return stringify(this.left) + ' > ' + stringify(this.right);\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(BigNumber(left.greater(right) === true ? 1 : 0));\n    } else {\n        state.stack.push(new GT(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport * as functionHashes from '../../data/functionHashes.json';\nimport stringify from '../utils/stringify';\n\nconst updateCallDataLoad = (item: any, types: any) => {\n    for (const i in item) {\n        if (item.hasOwnProperty(i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'CALLDATALOAD' &&\n                BigNumber.isInstance(item[i].location)\n            ) {\n                const argNumber = item[i].location\n                    .subtract(4)\n                    .divide(32)\n                    .toString();\n                item[i].type = types[argNumber];\n            }\n            if (typeof item[i] === 'object') {\n                updateCallDataLoad(item[i], types);\n            }\n        }\n    }\n};\n\nconst findReturns = (item: any) => {\n    const returns = [];\n    for (const i in item) {\n        if (item.hasOwnProperty(i)) {\n            if (\n                typeof item[i] === 'object' &&\n                item[i].name === 'RETURN' &&\n                item[i].items &&\n                item[i].items.length > 0\n            ) {\n                returns.push(item[i].items);\n            }\n            if (typeof item[i] === 'object') {\n                const deepReturns: any = findReturns(item[i]);\n                if (deepReturns.length > 0) {\n                    returns.push(...deepReturns);\n                }\n            }\n        }\n    }\n    return returns;\n};\n\nexport class TopLevelFunction {\n    readonly name: string;\n    readonly type?: string;\n    readonly label: string;\n    readonly hash: any;\n    readonly gasUsed: number;\n    readonly payable: boolean;\n    readonly visibility: string;\n    readonly constant: boolean;\n    readonly items: any;\n    readonly returns: any;\n\n    constructor(items: any, hash: any, gasUsed: number) {\n        this.name = 'Function';\n        this.hash = hash;\n        this.gasUsed = gasUsed;\n        this.items = items;\n        this.payable = true;\n        this.visibility = 'public';\n        this.constant = false;\n        this.returns = [];\n        if (this.hash in functionHashes) {\n            this.label = (functionHashes as any)[this.hash];\n        } else {\n            this.label = this.hash + '()';\n        }\n        if (\n            this.items.length > 0 &&\n            this.items[0] instanceof REQUIRE &&\n            this.items[0].condition.name === 'ISZERO' &&\n            this.items[0].condition.item.name === 'CALLVALUE'\n        ) {\n            this.payable = false;\n            this.items.shift();\n        }\n        if (this.items.length === 1 && this.items[0].name === 'RETURN') {\n            this.constant = true;\n        }\n        if (this.hash in functionHashes) {\n            const functionName = (functionHashes as any)[this.hash].split('(')[0];\n            const argumentTypes = (functionHashes as any)[this.hash]\n                .replace(functionName, '')\n                .substr(1)\n                .slice(0, -1)\n                .split(',');\n            if (\n                argumentTypes.length > 1 ||\n                (argumentTypes.length === 1 && argumentTypes[0] !== '')\n            ) {\n                this.items.forEach((item: any) => updateCallDataLoad(item, argumentTypes));\n            }\n        }\n        const returns: any = [];\n        this.items.forEach((item: any) => {\n            const deepReturns = findReturns(item);\n            if (deepReturns.length > 0) {\n                returns.push(...deepReturns);\n            }\n        });\n        if (\n            returns.length > 0 &&\n            returns.every(\n                (returnItem: any) =>\n                    returnItem.length === returns[0].length &&\n                    returnItem.map((item: any) => item.type).join('') ===\n                        returns[0].map((item: any) => item.type).join('')\n            )\n        ) {\n            returns[0].forEach((item: any) => {\n                if (BigNumber.isInstance(item)) {\n                    this.returns.push('uint256');\n                } else if (item.type) {\n                    this.returns.push(item.type);\n                } else {\n                    this.returns.push('unknown');\n                }\n            });\n        } else if (returns.length > 0) {\n            this.returns.push('<unknown>');\n        }\n    }\n}\n\nexport class Variable {\n    readonly name: string;\n    readonly label: string | false;\n    readonly types: any;\n\n    constructor(label: string | false, types: any) {\n        this.name = 'Variable';\n        this.label = label;\n        this.types = types;\n    }\n}\n\nexport class REQUIRE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly condition: any;\n\n    constructor(condition: any) {\n        this.name = 'REQUIRE';\n        this.wrapped = true;\n        this.condition = condition;\n    }\n\n    toString() {\n        return 'require(' + stringify(this.condition) + ');';\n    }\n}\n\nexport class JUMPI {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly condition: any;\n    readonly location: any;\n    readonly valid: boolean;\n    readonly true?: any;\n    readonly false?: any;\n    readonly payable?: boolean;\n\n    constructor(condition: any, location: any, ifTrue?: any, ifFalse?: any, skipped?: boolean) {\n        this.name = 'JUMPI';\n        this.wrapped = true;\n        this.condition = condition;\n        this.location = location;\n        if (skipped) {\n            this.valid = true;\n        } else if (ifTrue && ifFalse) {\n            this.valid = true;\n            this.true = ifTrue;\n            this.false = ifFalse;\n            if (\n                this.true.length >= 1 &&\n                this.true[0] instanceof REQUIRE &&\n                this.true[0].condition.name === 'ISZERO' &&\n                this.true[0].condition.item.name === 'CALLVALUE'\n            ) {\n                this.payable = false;\n                this.true.shift();\n            } else {\n                this.payable = true;\n            }\n        } else {\n            this.valid = false;\n        }\n    }\n\n    toString() {\n        if (this.valid && this.true && this.false) {\n            return stringify(this.condition);\n        } else if (this.valid) {\n            return 'if' + stringify(this.condition) + ' goto(' + stringify(this.location) + ');';\n        } else {\n            console.log(this);\n            return \"revert(\\\"Bad jump destination\\\");\";\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    const jumpCondition = state.stack.pop();\n    const opcodes = state.getOpcodes();\n    console.log(jumpLocation);\n    console.log(state.conditions);\n    console.log('-');\n    if (!BigNumber.isInstance(jumpLocation)) {\n        state.halted = true;\n        state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n    } else {\n        const jumpLocationData = opcodes.find((o: any) => o.pc === jumpLocation.toJSNumber());\n        if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n            //state.halted = true;\n            //state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            state.instructions.push(new REQUIRE(jumpCondition));\n        } else if (BigNumber.isInstance(jumpCondition)) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (\n                jumpIndex >= 0 &&\n                !jumpCondition.equals(0) &&\n                !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)\n            ) {\n                state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\n                state.pc = jumpIndex;\n            }\n        } else if (\n            !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps) &&\n            jumpCondition.name === 'SIG'\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                const functionClone: any = state.clone();\n                functionClone.pc = jumpIndex;\n                const functionCloneTree = functionClone.parse();\n                state.functions[jumpCondition.hash] = new TopLevelFunction(\n                    functionCloneTree,\n                    jumpCondition.hash,\n                    functionClone.gasUsed\n                );\n                if (\n                    jumpCondition.hash in functionHashes &&\n                    functionCloneTree.length === 1 &&\n                    functionCloneTree[0].name === 'RETURN' &&\n                    functionCloneTree[0].items.every((item: any) => item.name === 'MappingLoad')\n                ) {\n                    functionCloneTree[0].items.forEach((item: any) => {\n                        const fullFunction = (functionHashes as any)[jumpCondition.hash];\n                        state.mappings[item.location].name = fullFunction.split('(')[0];\n                        if (\n                            item.structlocation &&\n                            !state.mappings[item.location].structs.includes(item.structlocation)\n                        ) {\n                            state.mappings[item.location].structs.push(item.structlocation);\n                        }\n                    });\n                    delete state.functions[jumpCondition.hash];\n                } else if (\n                    jumpCondition.hash in functionHashes &&\n                    state.functions[jumpCondition.hash].items.length === 1 &&\n                    state.functions[jumpCondition.hash].items[0].name === 'RETURN' &&\n                    state.functions[jumpCondition.hash].items[0].items.length === 1 &&\n                    state.functions[jumpCondition.hash].items[0].items[0].name === 'SLOAD' &&\n                    BigNumber.isInstance(\n                        state.functions[jumpCondition.hash].items[0].items[0].location\n                    )\n                ) {\n                    if (\n                        !(\n                            state.functions[jumpCondition.hash].items[0].items[0].location in\n                            state.variables\n                        )\n                    ) {\n                        const fullFunction = (functionHashes as any)[jumpCondition.hash];\n                        state.variables[\n                            state.functions[jumpCondition.hash].items[0].items[0].location\n                        ] = new Variable(fullFunction.split('(')[0], []);\n                        delete state.functions[jumpCondition.hash];\n                    } else {\n                        const fullFunction = (functionHashes as any)[jumpCondition.hash];\n                        state.variables[\n                            state.functions[jumpCondition.hash].items[0].items[0].location\n                        ].label = fullFunction.split('(')[0];\n                        delete state.functions[jumpCondition.hash];\n                    }\n                }\n            }\n        } else if (\n            !(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps) &&\n            ((jumpCondition.name === 'LT' &&\n                jumpCondition.left.name === 'CALLDATASIZE' &&\n                BigNumber.isInstance(jumpCondition.right) &&\n                jumpCondition.right.equals(4)) ||\n                (jumpCondition.name === 'ISZERO' && jumpCondition.item.name === 'CALLDATASIZE'))\n        ) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone: any = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree: any = falseClone.parse();\n                if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree.length === falseCloneTree.length &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID' &&\n                    trueCloneTree.map((item: any) => stringify(item)).join('') ===\n                        falseCloneTree.map((item: any) => stringify(item)).join('')\n                ) {\n                    state.functions[''] = new TopLevelFunction(\n                        trueCloneTree,\n                        '',\n                        trueCloneTree.gasUsed\n                    );\n                } else if (\n                    trueCloneTree.length > 0 &&\n                    trueCloneTree[0].name !== 'REVERT' &&\n                    trueCloneTree[0].name !== 'INVALID'\n                ) {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else if (!(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)) {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\n            if (jumpIndex >= 0) {\n                state.halted = true;\n                const trueClone: any = state.clone();\n                trueClone.pc = jumpIndex;\n                trueClone.conditions.push(jumpCondition);\n                const trueCloneTree = trueClone.parse();\n                const falseClone = state.clone();\n                falseClone.pc = state.pc + 1;\n                const falseCloneTree: any = falseClone.parse();\n                if (\n                    (falseCloneTree.length === 1 &&\n                        'name' in falseCloneTree[0] &&\n                        (falseCloneTree[0].name === 'REVERT' &&\n                            falseCloneTree[0].items &&\n                            falseCloneTree[0].items.length === 0)) ||\n                    falseCloneTree[0].name === 'INVALID'\n                ) {\n                    if (\n                        jumpCondition.name === 'CALL' &&\n                        BigNumber.isInstance(jumpCondition.memoryLength) &&\n                        jumpCondition.memoryLength.isZero() &&\n                        BigNumber.isInstance(jumpCondition.outputLength) &&\n                        jumpCondition.outputLength.isZero() &&\n                        jumpCondition.gas.name === 'MUL' &&\n                        jumpCondition.gas.left.name === 'ISZERO' &&\n                        BigNumber.isInstance(jumpCondition.gas.right) &&\n                        jumpCondition.gas.right.equals(2300)\n                    ) {\n                        jumpCondition.throwOnFail = true;\n                        state.instructions.push(jumpCondition);\n                        state.instructions.push(...trueCloneTree);\n                    } else {\n                        state.instructions.push(new REQUIRE(jumpCondition));\n                        state.instructions.push(...trueCloneTree);\n                    }\n                } else {\n                    state.instructions.push(\n                        new JUMPI(jumpCondition, jumpLocation, trueCloneTree, falseCloneTree)\n                    );\n                }\n            } else {\n                state.instructions.push(new JUMPI(jumpCondition, jumpLocation));\n            }\n        } else {\n            state.instructions.push(new JUMPI(jumpCondition, jumpLocation, null, null, true));\n        }\n    }\n};\n","export const stringifyInstructions = (instructionTree: any, indentation = 0): string => {\n    let instructionLines = '';\n    instructionTree.forEach((instruction: any) => {\n        if (instruction.name === 'JUMPI' && instruction.false) {\n            const condition = instruction.toString();\n            const falseInstructions = instruction.false.filter((i: any) => i.debugLevel > 0);\n            if (falseInstructions.length === 1 && falseInstructions[0].name === 'JUMPI') {\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '} else ';\n                const elseOrElseIf = stringifyInstructions(instruction.false, indentation);\n                if (elseOrElseIf.trim().startsWith('if')) {\n                    instructionLines += elseOrElseIf.trim() + '\\n';\n                } else {\n                    instructionLines +=\n                        '{\\n' +\n                        elseOrElseIf\n                            .split('\\n')\n                            .filter(l => l)\n                            .map(l => ' '.repeat(4) + l)\n                            .join('\\n');\n                    instructionLines += '\\n' + ' '.repeat(indentation) + '}\\n';\n                }\n            } else {\n                instructionLines += ' '.repeat(indentation) + 'if' + condition + ' {\\n';\n                instructionLines += stringifyInstructions(instruction.true, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '} else {\\n';\n                instructionLines += stringifyInstructions(instruction.false, indentation + 4);\n                instructionLines += ' '.repeat(indentation) + '}\\n';\n            }\n        } else {\n            instructionLines += ' '.repeat(indentation) + instruction.toString() + '\\n';\n        }\n    });\n    return instructionLines;\n};\n\nexport default stringifyInstructions;\n","export const STOP = 0x00;\nexport const ADD = 0x01;\nexport const MUL = 0x02;\nexport const SUB = 0x03;\nexport const DIV = 0x04;\nexport const SDIV = 0x05;\nexport const MOD = 0x06;\nexport const SMOD = 0x07;\nexport const ADDMOD = 0x08;\nexport const MULMOD = 0x09;\nexport const EXP = 0x0a;\nexport const SIGNEXTEND = 0x0b;\nexport const LT = 0x10;\nexport const GT = 0x11;\nexport const SLT = 0x12;\nexport const SGT = 0x13;\nexport const EQ = 0x14;\nexport const ISZERO = 0x15;\nexport const AND = 0x16;\nexport const OR = 0x17;\nexport const XOR = 0x18;\nexport const NOT = 0x19;\nexport const BYTE = 0x1a;\nexport const SHL = 0x1b;\nexport const SHR = 0x1c;\nexport const SAR = 0x1d;\nexport const SHA3 = 0x20;\nexport const ADDRESS = 0x30;\nexport const BALANCE = 0x31;\nexport const ORIGIN = 0x32;\nexport const CALLER = 0x33;\nexport const CALLVALUE = 0x34;\nexport const CALLDATALOAD = 0x35;\nexport const CALLDATASIZE = 0x36;\nexport const CALLDATACOPY = 0x37;\nexport const CODESIZE = 0x38;\nexport const CODECOPY = 0x39;\nexport const GASPRICE = 0x3a;\nexport const EXTCODESIZE = 0x3b;\nexport const EXTCODECOPY = 0x3c;\nexport const RETURNDATASIZE = 0x3d;\nexport const RETURNDATACOPY = 0x3e;\nexport const EXTCODEHASH = 0x3f;\nexport const BLOCKHASH = 0x40;\nexport const COINBASE = 0x41;\nexport const TIMESTAMP = 0x42;\nexport const NUMBER = 0x43;\nexport const DIFFICULTY = 0x44;\nexport const GASLIMIT = 0x45;\nexport const POP = 0x50;\nexport const MLOAD = 0x51;\nexport const MSTORE = 0x52;\nexport const MSTORE8 = 0x53;\nexport const SLOAD = 0x54;\nexport const SSTORE = 0x55;\nexport const JUMP = 0x56;\nexport const JUMPI = 0x57;\nexport const PC = 0x58;\nexport const MSIZE = 0x59;\nexport const GAS = 0x5a;\nexport const JUMPDEST = 0x5b;\nexport const PUSH1 = 0x60;\nexport const PUSH2 = 0x61;\nexport const PUSH3 = 0x62;\nexport const PUSH4 = 0x63;\nexport const PUSH5 = 0x64;\nexport const PUSH6 = 0x65;\nexport const PUSH7 = 0x66;\nexport const PUSH8 = 0x67;\nexport const PUSH9 = 0x68;\nexport const PUSH10 = 0x69;\nexport const PUSH11 = 0x6a;\nexport const PUSH12 = 0x6b;\nexport const PUSH13 = 0x6c;\nexport const PUSH14 = 0x6d;\nexport const PUSH15 = 0x6e;\nexport const PUSH16 = 0x6f;\nexport const PUSH17 = 0x70;\nexport const PUSH18 = 0x71;\nexport const PUSH19 = 0x72;\nexport const PUSH20 = 0x73;\nexport const PUSH21 = 0x74;\nexport const PUSH22 = 0x75;\nexport const PUSH23 = 0x76;\nexport const PUSH24 = 0x77;\nexport const PUSH25 = 0x78;\nexport const PUSH26 = 0x79;\nexport const PUSH27 = 0x7a;\nexport const PUSH28 = 0x7b;\nexport const PUSH29 = 0x7c;\nexport const PUSH30 = 0x7d;\nexport const PUSH31 = 0x7e;\nexport const PUSH32 = 0x7f;\nexport const DUP1 = 0x80;\nexport const DUP2 = 0x81;\nexport const DUP3 = 0x82;\nexport const DUP4 = 0x83;\nexport const DUP5 = 0x84;\nexport const DUP6 = 0x85;\nexport const DUP7 = 0x86;\nexport const DUP8 = 0x87;\nexport const DUP9 = 0x88;\nexport const DUP10 = 0x89;\nexport const DUP11 = 0x8a;\nexport const DUP12 = 0x8b;\nexport const DUP13 = 0x8c;\nexport const DUP14 = 0x8d;\nexport const DUP15 = 0x8e;\nexport const DUP16 = 0x8f;\nexport const SWAP1 = 0x90;\nexport const SWAP2 = 0x91;\nexport const SWAP3 = 0x92;\nexport const SWAP4 = 0x93;\nexport const SWAP5 = 0x94;\nexport const SWAP6 = 0x95;\nexport const SWAP7 = 0x96;\nexport const SWAP8 = 0x97;\nexport const SWAP9 = 0x98;\nexport const SWAP10 = 0x99;\nexport const SWAP11 = 0x9a;\nexport const SWAP12 = 0x9b;\nexport const SWAP13 = 0x9c;\nexport const SWAP14 = 0x9d;\nexport const SWAP15 = 0x9e;\nexport const SWAP16 = 0x9f;\nexport const LOG0 = 0xa0;\nexport const LOG1 = 0xa1;\nexport const LOG2 = 0xa2;\nexport const LOG3 = 0xa3;\nexport const LOG4 = 0xa4;\nexport const CREATE = 0xf0;\nexport const CALL = 0xf1;\nexport const CALLCODE = 0xf2;\nexport const RETURN = 0xf3;\nexport const DELEGATECALL = 0xf4;\nexport const CREATE2 = 0xf5;\nexport const STATICCALL = 0xfa;\nexport const REVERT = 0xfd;\nexport const INVALID = 0xfe;\nexport const SELFDESTRUCT = 0xff;\n\nexport const codes = {\n    0x00: 'STOP',\n    0x01: 'ADD',\n    0x02: 'MUL',\n    0x03: 'SUB',\n    0x04: 'DIV',\n    0x05: 'SDIV',\n    0x06: 'MOD',\n    0x07: 'SMOD',\n    0x08: 'ADDMOD',\n    0x09: 'MULMOD',\n    0x0a: 'EXP',\n    0x0b: 'SIGNEXTEND',\n    0x10: 'LT',\n    0x11: 'GT',\n    0x12: 'SLT',\n    0x13: 'SGT',\n    0x14: 'EQ',\n    0x15: 'ISZERO',\n    0x16: 'AND',\n    0x17: 'OR',\n    0x18: 'XOR',\n    0x19: 'NOT',\n    0x1a: 'BYTE',\n    0x1b: 'SHL',\n    0x1c: 'SHR',\n    0x1d: 'SAR',\n    0x20: 'SHA3',\n    0x30: 'ADDRESS',\n    0x31: 'BALANCE',\n    0x32: 'ORIGIN',\n    0x33: 'CALLER',\n    0x34: 'CALLVALUE',\n    0x35: 'CALLDATALOAD',\n    0x36: 'CALLDATASIZE',\n    0x37: 'CALLDATACOPY',\n    0x38: 'CODESIZE',\n    0x39: 'CODECOPY',\n    0x3a: 'GASPRICE',\n    0x3b: 'EXTCODESIZE',\n    0x3c: 'EXTCODECOPY',\n    0x3d: 'RETURNDATASIZE',\n    0x3e: 'RETURNDATACOPY',\n    0x3f: 'EXTCODEHASH',\n    0x40: 'BLOCKHASH',\n    0x41: 'COINBASE',\n    0x42: 'TIMESTAMP',\n    0x43: 'NUMBER',\n    0x44: 'DIFFICULTY',\n    0x45: 'GASLIMIT',\n    0x50: 'POP',\n    0x51: 'MLOAD',\n    0x52: 'MSTORE',\n    0x53: 'MSTORE8',\n    0x54: 'SLOAD',\n    0x55: 'SSTORE',\n    0x56: 'JUMP',\n    0x57: 'JUMPI',\n    0x58: 'PC',\n    0x59: 'MSIZE',\n    0x5a: 'GAS',\n    0x5b: 'JUMPDEST',\n    0x60: 'PUSH1',\n    0x61: 'PUSH2',\n    0x62: 'PUSH3',\n    0x63: 'PUSH4',\n    0x64: 'PUSH5',\n    0x65: 'PUSH6',\n    0x66: 'PUSH7',\n    0x67: 'PUSH8',\n    0x68: 'PUSH9',\n    0x69: 'PUSH10',\n    0x6a: 'PUSH11',\n    0x6b: 'PUSH12',\n    0x6c: 'PUSH13',\n    0x6d: 'PUSH14',\n    0x6e: 'PUSH15',\n    0x6f: 'PUSH16',\n    0x70: 'PUSH17',\n    0x71: 'PUSH18',\n    0x72: 'PUSH19',\n    0x73: 'PUSH20',\n    0x74: 'PUSH21',\n    0x75: 'PUSH22',\n    0x76: 'PUSH23',\n    0x77: 'PUSH24',\n    0x78: 'PUSH25',\n    0x79: 'PUSH26',\n    0x7a: 'PUSH27',\n    0x7b: 'PUSH28',\n    0x7c: 'PUSH29',\n    0x7d: 'PUSH30',\n    0x7e: 'PUSH31',\n    0x7f: 'PUSH32',\n    0x80: 'DUP1',\n    0x81: 'DUP2',\n    0x82: 'DUP3',\n    0x83: 'DUP4',\n    0x84: 'DUP5',\n    0x85: 'DUP6',\n    0x86: 'DUP7',\n    0x87: 'DUP8',\n    0x88: 'DUP9',\n    0x89: 'DUP10',\n    0x8a: 'DUP11',\n    0x8b: 'DUP12',\n    0x8c: 'DUP13',\n    0x8d: 'DUP14',\n    0x8e: 'DUP15',\n    0x8f: 'DUP16',\n    0x90: 'SWAP1',\n    0x91: 'SWAP2',\n    0x92: 'SWAP3',\n    0x93: 'SWAP4',\n    0x94: 'SWAP5',\n    0x95: 'SWAP6',\n    0x96: 'SWAP7',\n    0x97: 'SWAP8',\n    0x98: 'SWAP9',\n    0x99: 'SWAP10',\n    0x9a: 'SWAP11',\n    0x9b: 'SWAP12',\n    0x9c: 'SWAP13',\n    0x9d: 'SWAP14',\n    0x9e: 'SWAP15',\n    0x9f: 'SWAP16',\n    0xa0: 'LOG0',\n    0xa1: 'LOG1',\n    0xa2: 'LOG2',\n    0xa3: 'LOG3',\n    0xa4: 'LOG4',\n    0xf0: 'CREATE',\n    0xf1: 'CALL',\n    0xf2: 'CALLCODE',\n    0xf3: 'RETURN',\n    0xf4: 'DELEGATECALL',\n    0xf5: 'CREATE2',\n    0xfa: 'STATICCALL',\n    0xfd: 'REVERT',\n    0xfe: 'INVALID',\n    0xff: 'SELFDESTRUCT'\n};\n\nexport const names = {\n    STOP: 0x00,\n    ADD: 0x01,\n    MUL: 0x02,\n    SUB: 0x03,\n    DIV: 0x04,\n    SDIV: 0x05,\n    MOD: 0x06,\n    SMOD: 0x07,\n    ADDMOD: 0x08,\n    MULMOD: 0x09,\n    EXP: 0x0a,\n    SIGNEXTEND: 0x0b,\n    LT: 0x10,\n    GT: 0x11,\n    SLT: 0x12,\n    SGT: 0x13,\n    EQ: 0x14,\n    ISZERO: 0x15,\n    AND: 0x16,\n    OR: 0x17,\n    XOR: 0x18,\n    NOT: 0x19,\n    BYTE: 0x1a,\n    SHL: 0x1b,\n    SHR: 0x1c,\n    SAR: 0x1d,\n    SHA3: 0x20,\n    ADDRESS: 0x30,\n    BALANCE: 0x31,\n    ORIGIN: 0x32,\n    CALLER: 0x33,\n    CALLVALUE: 0x34,\n    CALLDATALOAD: 0x35,\n    CALLDATASIZE: 0x36,\n    CALLDATACOPY: 0x37,\n    CODESIZE: 0x38,\n    CODECOPY: 0x39,\n    GASPRICE: 0x3a,\n    EXTCODESIZE: 0x3b,\n    EXTCODECOPY: 0x3c,\n    RETURNDATASIZE: 0x3d,\n    RETURNDATACOPY: 0x3e,\n    EXTCODEHASH: 0x3f,\n    BLOCKHASH: 0x40,\n    COINBASE: 0x41,\n    TIMESTAMP: 0x42,\n    NUMBER: 0x43,\n    DIFFICULTY: 0x44,\n    GASLIMIT: 0x45,\n    POP: 0x50,\n    MLOAD: 0x51,\n    MSTORE: 0x52,\n    MSTORE8: 0x53,\n    SLOAD: 0x54,\n    SSTORE: 0x55,\n    JUMP: 0x56,\n    JUMPI: 0x57,\n    PC: 0x58,\n    MSIZE: 0x59,\n    GAS: 0x5a,\n    JUMPDEST: 0x5b,\n    PUSH1: 0x60,\n    PUSH2: 0x61,\n    PUSH3: 0x62,\n    PUSH4: 0x63,\n    PUSH5: 0x64,\n    PUSH6: 0x65,\n    PUSH7: 0x66,\n    PUSH8: 0x67,\n    PUSH9: 0x68,\n    PUSH10: 0x69,\n    PUSH11: 0x6a,\n    PUSH12: 0x6b,\n    PUSH13: 0x6c,\n    PUSH14: 0x6d,\n    PUSH15: 0x6e,\n    PUSH16: 0x6f,\n    PUSH17: 0x70,\n    PUSH18: 0x71,\n    PUSH19: 0x72,\n    PUSH20: 0x73,\n    PUSH21: 0x74,\n    PUSH22: 0x75,\n    PUSH23: 0x76,\n    PUSH24: 0x77,\n    PUSH25: 0x78,\n    PUSH26: 0x79,\n    PUSH27: 0x7a,\n    PUSH28: 0x7b,\n    PUSH29: 0x7c,\n    PUSH30: 0x7d,\n    PUSH31: 0x7e,\n    PUSH32: 0x7f,\n    DUP1: 0x80,\n    DUP2: 0x81,\n    DUP3: 0x82,\n    DUP4: 0x83,\n    DUP5: 0x84,\n    DUP6: 0x85,\n    DUP7: 0x86,\n    DUP8: 0x87,\n    DUP9: 0x88,\n    DUP10: 0x89,\n    DUP11: 0x8a,\n    DUP12: 0x8b,\n    DUP13: 0x8c,\n    DUP14: 0x8d,\n    DUP15: 0x8e,\n    DUP16: 0x8f,\n    SWAP1: 0x90,\n    SWAP2: 0x91,\n    SWAP3: 0x92,\n    SWAP4: 0x93,\n    SWAP5: 0x94,\n    SWAP6: 0x95,\n    SWAP7: 0x96,\n    SWAP8: 0x97,\n    SWAP9: 0x98,\n    SWAP10: 0x99,\n    SWAP11: 0x9a,\n    SWAP12: 0x9b,\n    SWAP13: 0x9c,\n    SWAP14: 0x9d,\n    SWAP15: 0x9e,\n    SWAP16: 0x9f,\n    LOG0: 0xa0,\n    LOG1: 0xa1,\n    LOG2: 0xa2,\n    LOG3: 0xa3,\n    LOG4: 0xa4,\n    CREATE: 0xf0,\n    CALL: 0xf1,\n    CALLCODE: 0xf2,\n    RETURN: 0xf3,\n    DELEGATECALL: 0xf4,\n    CREATE2: 0xf5,\n    STATICCALL: 0xfa,\n    REVERT: 0xfd,\n    INVALID: 0xfe,\n    SELFDESTRUCT: 0xff\n};\n\nexport default {\n    ...codes,\n    ...names\n};\n","import * as _functions from '../data/functions.json';\nimport * as _events from '../data/events.json';\nimport * as _functionHashes from '../data/functionHashes.json';\nimport * as _eventHashes from '../data/eventHashes.json';\nimport Transaction from './classes/tx.class';\nimport EVM from './classes/evm.class';\n\nexport const functions: any = _functions as any;\nexport const events: any = _events as any;\nexport const functionHashes: any = _functionHashes as any;\nexport const eventHashes: any = _eventHashes as any;\n\nexport * from './opcodes';\n\nexport { EVM, Transaction };\n","import * as BigNumber from '../../node_modules/big-integer';\nimport * as functionHashes from '../../data/functionHashes.json';\n\nconst parseSingle = (data: any, type: any) => {\n    if (type === 'string') {\n        return '\"' + Buffer.from(data, 'hex').toString('utf8') + '\"';\n    } else if (type === 'address') {\n        return '0x' + data.substring(24);\n    } else if (type === 'uint256' || type === 'uint8') {\n        return BigNumber(data, 16).toString();\n    } else if (type === 'bool') {\n        return (!BigNumber(data, 16).isZero()).toString();\n    } else {\n        return data;\n    }\n};\n\nexport default class Transaction {\n    blockHash?: string;\n    blockNumber?: number;\n    from?: string;\n    gas?: number;\n    gasPrice?: number;\n    input?: string;\n    to?: string;\n    value?: number;\n\n    constructor(transactionObject?: any) {\n        if (transactionObject) {\n            if ('blockHash' in transactionObject) {\n                this.blockHash = transactionObject.blockHash;\n            }\n            if ('blockNumber' in transactionObject) {\n                this.blockNumber = transactionObject.blockNumber;\n            }\n            if ('from' in transactionObject) {\n                this.from = transactionObject.from;\n            }\n            if ('gas' in transactionObject) {\n                this.gas = transactionObject.gas;\n            }\n            if ('gasPrice' in transactionObject) {\n                this.gasPrice = transactionObject.gasPrice;\n            }\n            if ('input' in transactionObject) {\n                this.input = transactionObject.input.replace('0x', '');\n            }\n            if ('to' in transactionObject) {\n                this.to = transactionObject.to;\n            }\n            if ('value' in transactionObject) {\n                this.value = transactionObject.value;\n            }\n        }\n    }\n\n    setInput(input: string): void {\n        this.input = input.replace('0x', '');\n    }\n\n    getFunctionHash(): string | false {\n        if (this.input && this.input.length >= 8) {\n            return this.input.substr(0, 8);\n        } else {\n            return false;\n        }\n    }\n\n    getFunction(): string | false {\n        const functionHash = this.getFunctionHash();\n        if (functionHash && functionHash in functionHashes) {\n            return (functionHashes as any)[functionHash];\n        } else {\n            return false;\n        }\n    }\n\n    getFunctionName(): string | false {\n        const rawFunction = this.getFunction();\n        if (rawFunction) {\n            return rawFunction.split('(')[0];\n        } else {\n            return false;\n        }\n    }\n\n    getRawArguments(): string[] {\n        if (this.input && this.input.length >= 70) {\n            return this.input.substr(8).match(/.{1,64}/g)!;\n        } else {\n            return [];\n        }\n    }\n\n    getArguments(descriptive: boolean = true): string[] {\n        const functionName = this.getFunction();\n        const functionArguments = this.getRawArguments();\n        if (functionName && this.input) {\n            const rawFunctionArguments = functionName\n                .split('(')[1]\n                .slice(0, -1)\n                .split(',');\n            if (\n                rawFunctionArguments.length === 1 &&\n                rawFunctionArguments[0] === '' &&\n                functionArguments.length === 0\n            ) {\n                return [];\n            } else {\n                const result: string[] = [];\n                for (let i = 0; i < rawFunctionArguments.length; i++) {\n                    const functionArgumentType = rawFunctionArguments[i] || 'unknown';\n                    const functionArgument = functionArguments[i];\n                    if (functionArgumentType === 'string') {\n                        const location = BigNumber(functionArgument, 16)\n                            .divide(32)\n                            .toJSNumber();\n                        const length = BigNumber(functionArguments[location], 16)\n                            .multiply(2)\n                            .toJSNumber();\n                        const data = this.input.substring(8).substr((location + 1) * 64, length);\n                        result.push(parseSingle(data, functionArgumentType));\n                    } else {\n                        result.push(parseSingle(functionArgument, functionArgumentType));\n                    }\n                }\n                return result;\n            }\n        } else {\n            return functionArguments;\n        }\n    }\n\n    isContractCreation(): boolean {\n        return this.to === null;\n    }\n}\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import * as functionHashes from '../../data/functionHashes.json';\nimport * as eventHashes from '../../data/eventHashes.json';\nimport opcodeFunctions from '../utils/opcodes';\nimport stringifyEvents from '../utils/stringifyEvents';\nimport stringifyStructs from '../utils/stringifyStructs';\nimport stringifyMappings from '../utils/stringifyMappings';\nimport stringifyVariables from '../utils/stringifyVariables';\nimport stringifyFunctions from '../utils/stringifyFunctions';\nimport stringifyInstructions from '../utils/stringifyInstructions';\nimport Stack from './stack.class';\nimport Event from '../interfaces/event.interface';\nimport Instruction from '../interfaces/instruction.interface';\nimport Mapping from '../interfaces/mapping.interface';\nimport Opcode from '../interfaces/opcode.interface';\nimport Variable from '../interfaces/variable.interface';\nimport {\n    STOP,\n    RETURN,\n    REVERT,\n    INVALID,\n    PUSH1,\n    PUSH32,\n    JUMPDEST,\n    SELFDESTRUCT,\n    codes,\n    names\n} from '../opcodes';\n\nexport default class EVM {\n    pc: number = 0;\n    stack: Stack = new Stack();\n    memory: any = {};\n    opcodes: Opcode[] = [];\n    instructions: Instruction[] = [];\n    storage: any = {};\n    jumps: any = {};\n    code: Buffer;\n    mappings: Mapping = {};\n    layer: number = 0;\n    halted: boolean = false;\n    functions: any = {};\n    variables: Variable = {};\n    events: Event = {};\n    gasUsed: number = 0;\n    conditions: any = [];\n\n    constructor(code: string | Buffer) {\n        if (code instanceof Buffer) {\n            this.code = code;\n        } else {\n            this.code = Buffer.from(code.replace('0x', ''), 'hex');\n        }\n    }\n\n    clone(): EVM {\n        const clone = new EVM(this.code);\n        clone.pc = this.pc;\n        clone.opcodes = this.opcodes;\n        clone.stack = this.stack.clone();\n        clone.memory = { ...this.memory };\n        clone.storage = this.storage;\n        clone.jumps = { ...this.jumps };\n        clone.mappings = this.mappings;\n        clone.layer = this.layer + 1;\n        clone.functions = this.functions;\n        clone.variables = this.variables;\n        clone.events = this.events;\n        clone.gasUsed = this.gasUsed;\n        clone.conditions = [...this.conditions];\n        return clone;\n    }\n\n    getBytecode(): string {\n        return '0x' + this.code.toString('hex');\n    }\n\n    getOpcodes(): Opcode[] {\n        if (this.opcodes.length === 0) {\n            for (let index = 0; index < this.code.length; index++) {\n                const currentOp: Opcode = {\n                    pc: index,\n                    opcode: this.code[index],\n                    name: 'INVALID'\n                };\n                if (currentOp.opcode in codes) {\n                    currentOp.name = (codes as any)[this.code[index]];\n                }\n                this.opcodes.push(currentOp);\n                if (currentOp.name.startsWith('PUSH')) {\n                    const pushDataLength = this.code[index] - 0x5f;\n                    const pushData = this.code.slice(index + 1, index + pushDataLength + 1);\n                    currentOp.pushData = pushData;\n                    index += pushDataLength;\n                }\n            }\n        }\n        return this.opcodes;\n    }\n\n    getFunctions(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH4')\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\n                    .filter(hash => hash in functionHashes)\n                    .map(hash => (functionHashes as any)[hash])\n            )\n        ];\n    }\n\n    getEvents(): string[] {\n        return [\n            ...new Set(\n                this.getOpcodes()\n                    .filter(opcode => opcode.name === 'PUSH32')\n                    .map(opcode => (opcode.pushData ? opcode.pushData.toString('hex') : ''))\n                    .filter(hash => hash in eventHashes)\n                    .map(hash => (eventHashes as any)[hash])\n            )\n        ];\n    }\n\n    containsOpcode(opcode: number | string): boolean {\n        let halted = false;\n        if (typeof opcode === 'string' && opcode in names) {\n            opcode = (names as any)[opcode];\n        } else if (typeof opcode === 'string') {\n            throw new Error('Invalid opcode provided');\n        }\n        for (let index = 0; index < this.code.length; index++) {\n            const currentOpcode = this.code[index];\n            if (currentOpcode === opcode && !halted) {\n                return true;\n            } else if (currentOpcode === JUMPDEST) {\n                halted = false;\n            } else if ([STOP, RETURN, REVERT, INVALID, SELFDESTRUCT].includes(currentOpcode)) {\n                halted = true;\n            } else if (currentOpcode >= PUSH1 && currentOpcode <= PUSH32) {\n                index += currentOpcode - PUSH1 + 0x01;\n            }\n        }\n        return false;\n    }\n\n    getJumpDestinations(): number[] {\n        return this.getOpcodes()\n            .filter(opcode => opcode.name === 'JUMPDEST')\n            .map(opcode => opcode.pc);\n    }\n\n    getSwarmHash(): string | false {\n        const regex = /a165627a7a72305820([a-f0-9]{64})0029$/;\n        const bytecode = this.getBytecode();\n        const match = bytecode.match(regex);\n        if (match && match[1]) {\n            return 'bzzr://' + match[1];\n        } else {\n            return false;\n        }\n    }\n\n    getABI(): any {\n        const abi: any = [];\n        if (this.instructions.length === 0) {\n            this.parse();\n        }\n        Object.keys(this.functions).forEach((key: string) => {\n            // abi.push({ type: 'function' });\n            //\n            // const item: any = abi.push({ type: 'function' });\n            // item.name = this.functions[key].label.split('(')[0];\n            // item.payable = this.functions[key].payable;\n            // item.constant = this.functions[key].constant;\n\n            const nameAndParamsRegex = /(.*)\\((.*)\\)/; // will isolate function name from args ['transfer','address,uint256']\n            const matches = nameAndParamsRegex.exec(this.functions[key].label);\n            if (matches !== null) {\n                const item = {\n                    constant: this.functions[key].constant,\n                    name: matches[1] || '',\n                    inputs:\n                        matches[2].split(',').map((input: string) => {\n                            return {\n                                name: '',\n                                type: input\n                            };\n                        }) || [],\n                    full: this.functions[key],\n                    type: 'function'\n                };\n                abi.push(item);\n            }\n        });\n        return abi;\n    }\n\n    reset(): void {\n        this.pc = 0;\n        this.instructions = [];\n        this.stack.reset();\n        this.memory = {};\n        this.storage = {};\n        this.jumps = {};\n        this.mappings = {};\n        this.functions = {};\n        this.variables = {};\n        this.events = {};\n        this.gasUsed = 0;\n    }\n\n    parse(): Instruction[] {\n        if (this.instructions.length === 0) {\n            const opcodes = this.getOpcodes();\n            for (this.pc; this.pc < opcodes.length && !this.halted; this.pc++) {\n                const opcode = opcodes[this.pc];\n                if (!(opcode.name in opcodeFunctions)) {\n                    throw new Error('Unknown OPCODE: ' + opcode.name);\n                } else {\n                    (opcodeFunctions as any)[opcode.name](opcode, this);\n                }\n            }\n        }\n        return this.instructions;\n    }\n\n    decompile(): string {\n        const instructionTree = this.parse();\n        const events = stringifyEvents(this.events, this.getEvents());\n        const structs = stringifyStructs(this.mappings);\n        const mappings = stringifyMappings(this.mappings);\n        const variables = stringifyVariables(this.variables);\n        const functions = Object.keys(this.functions)\n            .map((functionName: string) =>\n                stringifyFunctions(functionName, this.functions[functionName])\n            )\n            .join('');\n        const code = stringifyInstructions(instructionTree);\n        return events + structs + mappings + variables + functions + code;\n    }\n\n    isERC165(): boolean {\n        return ['supportsInterface(bytes4)'].every(v => this.getFunctions().includes(v));\n    }\n}\n","import STOP from '../opcodes/stop';\nimport ADD from '../opcodes/add';\nimport MUL from '../opcodes/mul';\nimport SUB from '../opcodes/sub';\nimport DIV from '../opcodes/div';\nimport MOD from '../opcodes/mod';\nimport ADDMOD from '../opcodes/addmod';\nimport MULMOD from '../opcodes/mulmod';\nimport EXP from '../opcodes/exp';\nimport SIGNEXTEND from '../opcodes/signextend';\nimport LT from '../opcodes/lt';\nimport GT from '../opcodes/gt';\nimport EQ from '../opcodes/eq';\nimport ISZERO from '../opcodes/iszero';\nimport AND from '../opcodes/and';\nimport OR from '../opcodes/or';\nimport XOR from '../opcodes/xor';\nimport NOT from '../opcodes/not';\nimport BYTE from '../opcodes/byte';\nimport SHL from '../opcodes/shl';\nimport SHR from '../opcodes/shr';\nimport SAR from '../opcodes/sar';\nimport SHA3 from '../opcodes/sha3';\nimport ADDRESS from '../opcodes/address';\nimport BALANCE from '../opcodes/balance';\nimport ORIGIN from '../opcodes/origin';\nimport CALLER from '../opcodes/caller';\nimport CALLVALUE from '../opcodes/callvalue';\nimport CALLDATALOAD from '../opcodes/calldataload';\nimport CALLDATASIZE from '../opcodes/calldatasize';\nimport CALLDATACOPY from '../opcodes/calldatacopy';\nimport CODESIZE from '../opcodes/codesize';\nimport CODECOPY from '../opcodes/codecopy';\nimport GASPRICE from '../opcodes/gasprice';\nimport EXTCODESIZE from '../opcodes/extcodesize';\nimport EXTCODECOPY from '../opcodes/extcodecopy';\nimport RETURNDATASIZE from '../opcodes/returndatasize';\nimport RETURNDATACOPY from '../opcodes/returndatacopy';\nimport EXTCODEHASH from '../opcodes/extcodehash';\nimport BLOCKHASH from '../opcodes/blockhash';\nimport COINBASE from '../opcodes/coinbase';\nimport TIMESTAMP from '../opcodes/timestamp';\nimport NUMBER from '../opcodes/number';\nimport DIFFICULTY from '../opcodes/difficulty';\nimport GASLIMIT from '../opcodes/gaslimit';\nimport POP from '../opcodes/pop';\nimport MLOAD from '../opcodes/mload';\nimport MSTORE from '../opcodes/mstore';\nimport SLOAD from '../opcodes/sload';\nimport SSTORE from '../opcodes/sstore';\nimport JUMP from '../opcodes/jump';\nimport JUMPI from '../opcodes/jumpi';\nimport PC from '../opcodes/pc';\nimport MSIZE from '../opcodes/msize';\nimport GAS from '../opcodes/gas';\nimport JUMPDEST from '../opcodes/jumpdest';\nimport PUSH from '../opcodes/push';\nimport DUP from '../opcodes/dup';\nimport SWAP from '../opcodes/swap';\nimport LOG from '../opcodes/log';\nimport CREATE from '../opcodes/create';\nimport CALL from '../opcodes/call';\nimport CALLCODE from '../opcodes/callcode';\nimport RETURN from '../opcodes/return';\nimport DELEGATECALL from '../opcodes/delegatecall';\nimport CREATE2 from '../opcodes/create2';\nimport STATICCALL from '../opcodes/staticcall';\nimport REVERT from '../opcodes/revert';\nimport INVALID from '../opcodes/invalid';\nimport SELFDESTRUCT from '../opcodes/selfdestruct';\n\nexport default {\n    STOP,\n    ADD,\n    MUL,\n    SUB,\n    DIV,\n    SDIV: DIV,\n    MOD,\n    SMOD: MOD,\n    ADDMOD,\n    MULMOD,\n    EXP,\n    SIGNEXTEND,\n    LT,\n    GT,\n    SLT: LT,\n    SGT: GT,\n    EQ,\n    ISZERO,\n    AND,\n    OR,\n    XOR,\n    NOT,\n    BYTE,\n    SHL,\n    SHR,\n    SAR,\n    SHA3,\n    ADDRESS,\n    BALANCE,\n    ORIGIN,\n    CALLER,\n    CALLVALUE,\n    CALLDATALOAD,\n    CALLDATASIZE,\n    CALLDATACOPY,\n    CODESIZE,\n    CODECOPY,\n    GASPRICE,\n    EXTCODESIZE,\n    EXTCODECOPY,\n    RETURNDATASIZE,\n    RETURNDATACOPY,\n    EXTCODEHASH,\n    BLOCKHASH,\n    COINBASE,\n    TIMESTAMP,\n    NUMBER,\n    DIFFICULTY,\n    GASLIMIT,\n    POP,\n    MLOAD,\n    MSTORE,\n    MSTORE8: MSTORE,\n    SLOAD,\n    SSTORE,\n    JUMP,\n    JUMPI,\n    PC,\n    MSIZE,\n    GAS,\n    JUMPDEST,\n    PUSH1: PUSH,\n    PUSH2: PUSH,\n    PUSH3: PUSH,\n    PUSH4: PUSH,\n    PUSH5: PUSH,\n    PUSH6: PUSH,\n    PUSH7: PUSH,\n    PUSH8: PUSH,\n    PUSH9: PUSH,\n    PUSH10: PUSH,\n    PUSH11: PUSH,\n    PUSH12: PUSH,\n    PUSH13: PUSH,\n    PUSH14: PUSH,\n    PUSH15: PUSH,\n    PUSH16: PUSH,\n    PUSH17: PUSH,\n    PUSH18: PUSH,\n    PUSH19: PUSH,\n    PUSH20: PUSH,\n    PUSH21: PUSH,\n    PUSH22: PUSH,\n    PUSH23: PUSH,\n    PUSH24: PUSH,\n    PUSH25: PUSH,\n    PUSH26: PUSH,\n    PUSH27: PUSH,\n    PUSH28: PUSH,\n    PUSH29: PUSH,\n    PUSH30: PUSH,\n    PUSH31: PUSH,\n    PUSH32: PUSH,\n    DUP1: DUP,\n    DUP2: DUP,\n    DUP3: DUP,\n    DUP4: DUP,\n    DUP5: DUP,\n    DUP6: DUP,\n    DUP7: DUP,\n    DUP8: DUP,\n    DUP9: DUP,\n    DUP10: DUP,\n    DUP11: DUP,\n    DUP12: DUP,\n    DUP13: DUP,\n    DUP14: DUP,\n    DUP15: DUP,\n    DUP16: DUP,\n    SWAP1: SWAP,\n    SWAP2: SWAP,\n    SWAP3: SWAP,\n    SWAP4: SWAP,\n    SWAP5: SWAP,\n    SWAP6: SWAP,\n    SWAP7: SWAP,\n    SWAP8: SWAP,\n    SWAP9: SWAP,\n    SWAP10: SWAP,\n    SWAP11: SWAP,\n    SWAP12: SWAP,\n    SWAP13: SWAP,\n    SWAP14: SWAP,\n    SWAP15: SWAP,\n    SWAP16: SWAP,\n    LOG0: LOG,\n    LOG1: LOG,\n    LOG2: LOG,\n    LOG3: LOG,\n    LOG4: LOG,\n    CREATE,\n    CALL,\n    CALLCODE,\n    RETURN,\n    DELEGATECALL,\n    CREATE2,\n    STATICCALL,\n    REVERT,\n    INVALID,\n    SELFDESTRUCT\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class STOP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'STOP';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'return;';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.halted = true;\n    state.instructions.push(new STOP());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class DIV {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'DIV';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' / ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.divide(right));\n    } else if (BigNumber.isInstance(right) && right.equals(1)) {\n        state.stack.push(left);\n    } else {\n        state.stack.push(new DIV(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { ADD } from './add';\nimport { MOD } from './mod';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    const mod = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right) && BigNumber.isInstance(mod)) {\n        state.stack.push(left.add(right).mod(mod));\n    } else if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(new MOD(left.add(right), mod));\n    } else {\n        state.stack.push(new MOD(new ADD(left, right), mod));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { MUL } from './mul';\nimport { MOD } from './mod';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    const mod = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right) && BigNumber.isInstance(mod)) {\n        state.stack.push(left.multiply(right).mod(mod));\n    } else if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(new MOD(left.multiply(right), mod));\n    } else {\n        state.stack.push(new MOD(new MUL(left, right), mod));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class EXP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'EXP';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' ** ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.pow(right));\n    } else {\n        state.stack.push(new EXP(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { SHL } from './shl';\nimport { SAR } from './sar';\nimport { SUB } from './sub';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(\n            right.shiftLeft(BigNumber(32).subtract(left)).shiftRight(BigNumber(32).subtract(left))\n        );\n    } else if (BigNumber.isInstance(left)) {\n        state.stack.push(\n            new SAR(new SHL(right, BigNumber(32).subtract(left)), BigNumber(32).subtract(left))\n        );\n    } else {\n        state.stack.push(\n            new SAR(new SHL(right, new SUB(BigNumber(32), left)), new SUB(BigNumber(32), left))\n        );\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SIG {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly hash: string;\n\n    constructor(hash: string) {\n        this.name = 'SIG';\n        this.wrapped = false;\n        this.hash = hash;\n    }\n\n    toString() {\n        return 'msg.sig == ' + this.hash;\n    }\n}\n\nexport class EQ {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'EQ';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' == ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    let left = state.stack.pop();\n    let right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(BigNumber(left.equals(right) === true ? 1 : 0));\n    } else {\n        if (\n            BigNumber.isInstance(left) &&\n            right.name === 'DIV' &&\n            BigNumber.isInstance(right.right)\n        ) {\n            left = left.multiply(right.right);\n            right = right.left;\n        }\n        if (\n            BigNumber.isInstance(right) &&\n            left.name === 'DIV' &&\n            BigNumber.isInstance(left.right)\n        ) {\n            right = right.multiply(left.right);\n            left = left.left;\n        }\n        if (\n            BigNumber.isInstance(left) &&\n            /^[0]+$/.test(left.toString(16).substring(8)) &&\n            right.name === 'CALLDATALOAD' &&\n            right.location.equals(0)\n        ) {\n            state.stack.push(\n                new SIG(\n                    '0'.repeat(64 - left.toString(16).length) +\n                        left.toString(16).substring(0, 8 - (64 - left.toString(16).length))\n                )\n            );\n        } else if (\n            BigNumber.isInstance(right) &&\n            /^[0]+$/.test(right.toString(16).substring(8)) &&\n            left.name === 'CALLDATALOAD' &&\n            left.location.equals(0)\n        ) {\n            state.stack.push(\n                new SIG(\n                    '0'.repeat(64 - right.toString(16).length) +\n                        right.toString(16).substring(0, 8 - (64 - right.toString(16).length))\n                )\n            );\n        } else {\n            state.stack.push(new EQ(left, right));\n        }\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport { LT } from './lt';\nimport { GT } from './gt';\nimport stringify from '../utils/stringify';\n\nexport class ISZERO {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly item: any;\n\n    constructor(item: any) {\n        this.name = 'ISZERO';\n        this.wrapped = true;\n        this.item = item;\n    }\n\n    toString() {\n        if (this.item.name === 'EQ') {\n            return stringify(this.item.left) + ' != ' + stringify(this.item.right);\n        } else {\n            return stringify(this.item) + ' == 0';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const item = state.stack.pop();\n    if (BigNumber.isInstance(item)) {\n        state.stack.push(BigNumber(item.isZero() === true ? 1 : 0));\n    } else if (item.name === 'LT') {\n        if (item.equal) {\n            state.stack.push(new GT(item.left, item.right));\n        } else {\n            state.stack.push(new GT(item.left, item.right, true));\n        }\n    } else if (item.name === 'GT') {\n        if (item.equal) {\n            state.stack.push(new LT(item.left, item.right));\n        } else {\n            state.stack.push(new LT(item.left, item.right, true));\n        }\n    } else if (item instanceof ISZERO) {\n        state.stack.push(item.item);\n    } else {\n        state.stack.push(new ISZERO(item));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class AND {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'AND';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' && ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.and(right));\n    } else if (BigNumber.isInstance(left) && /^[f]+$/.test(left.toString(16))) {\n        right.size = left.toString(16).length;\n        state.stack.push(right);\n    } else if (BigNumber.isInstance(right) && /^[f]+$/.test(right.toString(16))) {\n        left.size = right.toString(16).length;\n        state.stack.push(left);\n        /*} else if (\n        BigNumber.isInstance(left) &&\n        left.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(right);\n    } else if (\n        BigNumber.isInstance(right) &&\n        right.equals('1461501637330902918203684832716283019655932542975')\n    ) {*/\n        /* 2 ** 160 */\n        /*    state.stack.push(left);*/\n    } else if (\n        BigNumber.isInstance(left) &&\n        right instanceof AND &&\n        BigNumber.isInstance(right.left) &&\n        left.equals(right.left)\n    ) {\n        state.stack.push(right.right);\n    } else {\n        state.stack.push(new AND(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class OR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'OR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' || ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.or(right));\n    } else {\n        state.stack.push(new OR(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class XOR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'XOR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' ^ ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.xor(right));\n    } else {\n        state.stack.push(new XOR(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class NOT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly item: any;\n\n    constructor(item: any) {\n        this.name = 'AND';\n        this.wrapped = true;\n        this.item = item;\n    }\n\n    toString() {\n        return '~' + stringify(this.item);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const item = state.stack.pop();\n    if (BigNumber.isInstance(item)) {\n        state.stack.push(item.not());\n    } else {\n        state.stack.push(new NOT(item));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class BYTE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly position: any;\n    readonly data: any;\n\n    constructor(position: any, data: any) {\n        this.name = 'BYTE';\n        this.wrapped = true;\n        this.position = position;\n        this.data = data;\n    }\n\n    toString() {\n        return '(' + stringify(this.data) + ' >> ' + stringify(this.position) + ') & 1';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const position = state.stack.pop();\n    const data = state.stack.pop();\n    if (BigNumber.isInstance(data) && BigNumber.isInstance(position)) {\n        state.stack.push(data.shiftRight(position).and(1));\n    } else {\n        state.stack.push(new BYTE(position, data));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SHR {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly left: any;\n    readonly right: any;\n\n    constructor(left: any, right: any) {\n        this.name = 'SHR';\n        this.wrapped = true;\n        this.left = left;\n        this.right = right;\n    }\n\n    toString() {\n        return stringify(this.left) + ' >>> ' + stringify(this.right);\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const left = state.stack.pop();\n    const right = state.stack.pop();\n    if (BigNumber.isInstance(left) && BigNumber.isInstance(right)) {\n        state.stack.push(left.shiftRight(right));\n    } else {\n        state.stack.push(new SHR(left, right));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { MLOAD } from './mload';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class SHA3 {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'SHA3';\n        this.wrapped = false;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'keccak256(' + this.items.map((item: any) => stringify(item)).join(', ') + ')';\n        } else {\n            return (\n                'keccak256(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')])'\n            );\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\n        const items = [];\n        for (\n            let i = memoryStart.toJSNumber();\n            i < memoryStart.add(memoryLength).toJSNumber();\n            i += 32\n        ) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.stack.push(new SHA3(items));\n    } else {\n        state.stack.push(new SHA3([], memoryStart, memoryLength));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class ADDRESS {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'ADDRESS';\n        this.type = 'address';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'this';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new ADDRESS());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class BALANCE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'BALANCE';\n        this.wrapped = false;\n        this.address = address;\n    }\n\n    toString() {\n        return stringify(this.address) + '.balance';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new BALANCE(address));\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class ORIGIN {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'ORIGIN';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'tx.origin';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new ORIGIN());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class CALLER {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLER';\n        this.name = 'address';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.sender';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLER());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class CALLVALUE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLVALUE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.value';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLVALUE());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class CALLDATALOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly returntype?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n\n    constructor(location: any) {\n        this.name = 'CALLDATALOAD';\n        this.wrapped = false;\n        this.location = location;\n    }\n\n    toString() {\n        if (BigNumber.isInstance(this.location) && this.location.isZero()) {\n            return 'msg.data';\n        } else if (\n            BigNumber.isInstance(this.location) &&\n            this.location\n                .subtract(4)\n                .mod(32)\n                .isZero()\n        ) {\n            return (\n                '_arg' +\n                this.location\n                    .subtract(4)\n                    .divide(32)\n                    .toString()\n            );\n        } else {\n            return 'msg.data[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const startLocation = state.stack.pop();\n    state.stack.push(new CALLDATALOAD(startLocation));\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class CALLDATASIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CALLDATASIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'msg.data.length';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CALLDATASIZE());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class CALLDATACOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(startLocation: any, copyLength: any) {\n        this.name = 'CALLDATACOPY';\n        this.wrapped = true;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'msg.data[' +\n            this.startLocation +\n            ':(' +\n            this.startLocation +\n            '+' +\n            this.copyLength +\n            ')];'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new CALLDATACOPY(startLocation, copyLength);\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class CODESIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'CODESIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'this.code.length';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new CODESIZE());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CODECOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(startLocation: any, copyLength: any) {\n        this.name = 'CODECOPY';\n        this.wrapped = true;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'this.code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new CODECOPY(startLocation, copyLength);\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class GASPRICE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GASPRICE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'tx.gasprice';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GASPRICE());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODESIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'EXTCODESIZE';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'address(' + stringify(this.address) + ').code.length';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new EXTCODESIZE(address));\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODECOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n    readonly startLocation: any;\n    readonly copyLength: any;\n\n    constructor(address: any, startLocation: any, copyLength: any) {\n        this.name = 'EXTCODECOPY';\n        this.wrapped = true;\n        this.address = address;\n        this.startLocation = startLocation;\n        this.copyLength = copyLength;\n    }\n\n    toString() {\n        return (\n            'address(' +\n            stringify(this.address) +\n            ').code[' +\n            stringify(this.startLocation) +\n            ':(' +\n            stringify(this.startLocation) +\n            '+' +\n            stringify(this.copyLength) +\n            ')]'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    const memoryLocation = state.stack.pop();\n    const startLocation = state.stack.pop();\n    const copyLength = state.stack.pop();\n    state.memory[memoryLocation] = new EXTCODECOPY(address, startLocation, copyLength);\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class RETURNDATASIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'RETURNDATASIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'output.length';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new RETURNDATASIZE());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class RETURNDATACOPY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly returnDataPosition: any;\n    readonly returnDataSize: any;\n\n    constructor(returnDataPosition: any, returnDataSize: any) {\n        this.name = 'RETURNDATACOPY';\n        this.wrapped = true;\n        this.returnDataPosition = returnDataPosition;\n        this.returnDataSize = returnDataSize;\n    }\n\n    toString() {\n        return (\n            'output[' +\n            stringify(this.returnDataPosition) +\n            ':(' +\n            stringify(this.returnDataPosition) +\n            '+' +\n            stringify(this.returnDataSize) +\n            ')]'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryPosition = state.stack.pop();\n    const returnDataPosition = state.stack.pop();\n    const returnDataSize = state.stack.pop();\n    state.memory[memoryPosition] = new RETURNDATACOPY(returnDataPosition, returnDataSize);\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class EXTCODEHASH {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'EXTCODEHASH';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'keccak256(address(' + stringify(this.address) + ').code)';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.stack.push(new EXTCODEHASH(address));\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class BLOCKHASH {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly number: any;\n\n    constructor(blockNumber: any) {\n        this.name = 'BLOCKHASH';\n        this.wrapped = true;\n        this.number = blockNumber;\n    }\n\n    toString() {\n        return 'block.blockhash(' + stringify(this.number) + ')';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const blockNumber = state.stack.pop();\n    state.stack.push(new BLOCKHASH(blockNumber));\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class COINBASE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'COINBASE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.coinbase';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new COINBASE());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class TIMESTAMP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'TIMESTAMP';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.timestamp';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new TIMESTAMP());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class NUMBER {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'NUMBER';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.number';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new NUMBER());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class DIFFICULTY {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'DIFFICULTY';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.difficulty';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new DIFFICULTY());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class GASLIMIT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GASLIMIT';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'block.gaslimit';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GASLIMIT());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.pop();\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class MSTORE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly data: any;\n\n    constructor(location: any, data: any) {\n        this.name = 'MSTORE';\n        this.wrapped = true;\n        this.location = location;\n        this.data = data;\n    }\n\n    toString() {\n        return 'memory[' + stringify(this.location) + '] = ' + stringify(this.data) + ';';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (BigNumber.isInstance(storeLocation)) {\n        state.memory[storeLocation.toJSNumber()] = storeData;\n    } else {\n        state.instructions.push(new MSTORE(storeLocation, storeData));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingLoad {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly count: any;\n    readonly items: any;\n    readonly structlocation?: any;\n    readonly mappings: any;\n\n    constructor(mappings: any, location: any, items: any, count: any, structlocation?: any) {\n        this.name = 'MappingLoad';\n        this.wrapped = false;\n        this.location = location;\n        this.count = count;\n        this.items = items;\n        this.structlocation = structlocation;\n        this.mappings = mappings;\n    }\n\n    toString() {\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (this.structlocation) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                '[' +\n                this.structlocation.toString() +\n                ']'\n            );\n        } else {\n            return (\n                mappingName + this.items.map((item: any) => '[' + stringify(item) + ']').join('')\n            );\n        }\n    }\n}\n\nexport class SLOAD {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly variables: any;\n\n    constructor(location: any, variables: any) {\n        this.name = 'SLOAD';\n        this.wrapped = false;\n        this.location = location;\n        this.variables = variables;\n    }\n\n    toString() {\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                return this.variables()[this.location.toString()].label;\n            } else {\n                return (\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1)\n                );\n            }\n        } else {\n            return 'storage[' + stringify(this.location) + ']';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    if (storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        storeLocation.left.name === 'SHA3' &&\n        BigNumber.isInstance(storeLocation.right)\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        BigNumber.isInstance(storeLocation.left) &&\n        storeLocation.right.name === 'SHA3'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.stack.push(\n                new MappingLoad(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.stack.push(new SLOAD(storeLocation, () => state.variables));\n        }\n    } else {\n        state.stack.push(new SLOAD(storeLocation, () => state.variables));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\nimport { Variable } from './jumpi';\n\nconst parseMapping = (...items: any[]) => {\n    const mappings: any = [];\n    items.forEach((item2: any) => {\n        if (item2.name === 'SHA3' && item2.items) {\n            mappings.push(...parseMapping(...item2.items));\n        } else {\n            mappings.push(item2);\n        }\n    });\n    return mappings;\n};\n\nexport class MappingStore {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly count: any;\n    readonly items: any;\n    readonly data: any;\n    readonly structlocation?: any;\n    readonly mappings: any;\n\n    constructor(\n        mappings: any,\n        location: any,\n        items: any,\n        data: any,\n        count: any,\n        structlocation?: any\n    ) {\n        this.name = 'MappingStore';\n        this.wrapped = false;\n        this.location = location;\n        this.items = items;\n        this.data = data;\n        this.count = count;\n        this.structlocation = structlocation;\n        this.mappings = mappings;\n    }\n\n    toString() {\n        //console.log(this);\n        let mappingName = 'mapping' + (this.count + 1);\n        if (this.location in this.mappings() && this.mappings()[this.location].name) {\n            mappingName = this.mappings()[this.location].name;\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'MappingLoad' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            console.log(this.items);\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.left) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'ADD' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            console.log(this.items);\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' += ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'MappingLoad' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' -= ' +\n                stringify(this.data.right) +\n                ';'\n            );\n        } else {\n            return (\n                mappingName +\n                this.items.map((item: any) => '[' + stringify(item) + ']').join('') +\n                ' = ' +\n                stringify(this.data) +\n                ';'\n            );\n        }\n    }\n}\n\nexport class SSTORE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly location: any;\n    readonly data: any;\n    readonly variables: any;\n\n    constructor(location: any, data: any, variables: any) {\n        this.name = 'SSTORE';\n        this.wrapped = true;\n        this.location = location;\n        this.data = data;\n        this.variables = variables;\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\n            this.variables()[this.location.toString()].types.push(() => this.data.type);\n        } else if (\n            BigNumber.isInstance(this.location) &&\n            !(this.location.toString() in this.variables())\n        ) {\n            this.variables()[this.location.toString()] = new Variable(false, [\n                () => this.data.type\n            ]);\n        }\n    }\n\n    toString() {\n        let variableName = 'storage[' + stringify(this.location) + ']';\n        if (BigNumber.isInstance(this.location) && this.location.toString() in this.variables()) {\n            if (this.variables()[this.location.toString()].label) {\n                variableName = this.variables()[this.location.toString()].label;\n            } else {\n                variableName =\n                    'var' + (Object.keys(this.variables()).indexOf(this.location.toString()) + 1);\n            }\n        }\n        if (\n            this.data.name === 'ADD' &&\n            this.data.right.name === 'SLOAD' &&\n            stringify(this.data.right.location) === stringify(this.location)\n        ) {\n            return variableName + ' += ' + stringify(this.data.left) + ';';\n        } else if (\n            this.data.name === 'SUB' &&\n            this.data.left.name === 'SLOAD' &&\n            stringify(this.data.left.location) === stringify(this.location)\n        ) {\n            return variableName + ' -= ' + stringify(this.data.right) + ';';\n        } else {\n            return variableName + ' = ' + stringify(this.data) + ';';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const storeLocation = state.stack.pop();\n    const storeData = state.stack.pop();\n    if (storeLocation.name === 'SHA3') {\n        const mappingItems = parseMapping(...storeLocation.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.mappings[mappingLocation].values.push(storeData);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString())\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        storeLocation.left.name === 'SHA3' &&\n        BigNumber.isInstance(storeLocation.right)\n    ) {\n        const mappingItems = parseMapping(...storeLocation.left.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.right\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        storeLocation.name === 'ADD' &&\n        BigNumber.isInstance(storeLocation.left) &&\n        storeLocation.right.name === 'SHA3'\n    ) {\n        const mappingItems = parseMapping(...storeLocation.right.items);\n        const mappingLocation = mappingItems.find((mappingItem: any) =>\n            BigNumber.isInstance(mappingItem)\n        );\n        const mappingParts = mappingItems.filter(\n            (mappingItem: any) => !BigNumber.isInstance(mappingItem)\n        );\n        if (mappingLocation && mappingParts.length > 0) {\n            if (!(mappingLocation in state.mappings)) {\n                state.mappings[mappingLocation] = {\n                    name: false,\n                    structs: [],\n                    keys: [],\n                    values: []\n                };\n            }\n            state.mappings[mappingLocation].keys.push(mappingParts);\n            state.instructions.push(\n                new MappingStore(\n                    () => state.mappings,\n                    mappingLocation,\n                    mappingParts,\n                    storeData,\n                    Object.keys(state.mappings).indexOf(mappingLocation.toString()),\n                    storeLocation.left\n                )\n            );\n        } else {\n            state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        }\n    } else if (\n        false &&\n        BigNumber.isInstance(storeLocation) &&\n        storeLocation.toString() in state.variables &&\n        storeData.type &&\n        !state.variables[storeLocation.toString()].types.includes(storeData.type)\n    ) {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n        state.variables[storeLocation.toString()].types.push(storeData.type);\n    } else {\n        state.instructions.push(new SSTORE(storeLocation, storeData, () => state.variables));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class JUMP {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly valid: boolean;\n    readonly location: any;\n\n    constructor(location: any, bad?: boolean) {\n        this.name = 'JUMP';\n        this.wrapped = false;\n        this.location = location;\n        this.valid = true;\n        if (bad) {\n            this.valid = false;\n        }\n    }\n\n    toString() {\n        if (!this.valid) {\n            return \"revert(\\\"Bad jump destination\\\");\";\n        } else {\n            return 'goto(' + stringify(this.location) + ');';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const jumpLocation = state.stack.pop();\n    if (!BigNumber.isInstance(jumpLocation)) {\n        state.halted = true;\n        state.instructions.push(new JUMP(jumpLocation, true));\n    } else {\n        const opcodes = state.getOpcodes();\n        const jumpLocationData = opcodes.find((o: any) => o.pc === jumpLocation.toJSNumber());\n        if (!jumpLocationData) {\n            state.halted = true;\n            state.instructions.push(new JUMP(jumpLocation, true));\n        } else {\n            const jumpIndex = opcodes.indexOf(jumpLocationData);\n            if (!(opcode.pc + ':' + jumpLocation.toJSNumber() in state.jumps)) {\n                if (!jumpLocationData || jumpLocationData.name !== 'JUMPDEST') {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                } else if (\n                    jumpLocationData &&\n                    jumpIndex >= 0 &&\n                    jumpLocationData.name === 'JUMPDEST'\n                ) {\n                    state.jumps[opcode.pc + ':' + jumpLocation.toJSNumber()] = true;\n                    state.pc = jumpIndex;\n                } else {\n                    state.halted = true;\n                    state.instructions.push(new JUMP(jumpLocation, true));\n                }\n            } else {\n                state.halted = true;\n                state.instructions.push(new JUMP(jumpLocation));\n            }\n        }\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(BigNumber(opcode.pc));\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class MSIZE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'MSIZE';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'memory.length';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new MSIZE());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class GAS {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n\n    constructor() {\n        this.name = 'GAS';\n        this.wrapped = false;\n    }\n\n    toString() {\n        return 'gasleft()';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.stack.push(new GAS());\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    /* Empty */\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const pushDataLength = parseInt(opcode.name.replace('PUSH', ''), 10);\n    state.stack.push(BigNumber(opcode.pushData!.toString('hex'), 16));\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const duplicateLocation = parseInt(opcode.name.replace('DUP', ''), 10) - 1;\n    state.stack.duplicate(duplicateLocation);\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const swapLocation = parseInt(opcode.name.replace('SWAP', ''), 10);\n    state.stack.swap(swapLocation);\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { MLOAD } from './mload';\nimport * as eventHashes from '../../data/eventHashes.json';\nimport * as BigNumber from '../../node_modules/big-integer';\n\nexport class LOG {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items?: any;\n    readonly topics: any;\n    readonly eventName?: string;\n\n    constructor(topics: any, items?: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'LOG';\n        this.wrapped = true;\n        this.topics = topics;\n        if (\n            this.topics.length > 0 &&\n            BigNumber.isInstance(this.topics[0]) &&\n            this.topics[0].toString(16) in eventHashes\n        ) {\n            this.eventName = (eventHashes as any)[this.topics[0].toString(16)].split('(')[0];\n            this.topics.shift();\n        }\n        if (this.memoryStart && this.memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.eventName) {\n            return (\n                'emit ' + this.eventName + '(' + [...this.topics, ...this.items].join(', ') + ');'\n            );\n        } else {\n            return 'log(' + [...this.topics, ...this.items].join(', ') + ');';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const topicsCount = parseInt(opcode.name.replace('LOG', ''), 10);\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const topics = [];\n    for (let i = 0; i < topicsCount; i++) {\n        topics.push(state.stack.pop());\n    }\n    if (topics.length > 0) {\n        const eventTopic = topics[0].toString(16);\n        if (!(eventTopic in state.events)) {\n            state.events[eventTopic] = {};\n            state.events[eventTopic].indexedCount = topics.length - 1;\n            if (eventTopic in eventHashes) {\n                state.events[eventTopic].label = (eventHashes as any)[eventTopic];\n            }\n        }\n    }\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\n        const items = [];\n        for (\n            let i = memoryStart.toJSNumber();\n            i < memoryStart.add(memoryLength).toJSNumber();\n            i += 32\n        ) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        if (topics.length === 0) {\n            if (!('anonymous' in state.events)) {\n                state.events.anonymous = [];\n            }\n            state.events.anonymous.push({ items });\n        }\n        state.instructions.push(new LOG(topics, items));\n    } else {\n        state.instructions.push(new LOG(topics, [], memoryStart, memoryLength));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CREATE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly value: any;\n\n    constructor(memoryStart: any, memoryLength: any, value: any) {\n        this.name = 'CREATE';\n        this.name = 'address';\n        this.wrapped = true;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.value = value;\n    }\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.stack.push(new CREATE(memoryStart, memoryLength, value));\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class CALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly value: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n    readonly throwOnFail: boolean;\n\n    constructor(\n        gas: any,\n        address: any,\n        value: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'CALL';\n        this.wrapped = false;\n        this.gas = gas;\n        this.address = address;\n        this.value = value;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n        this.throwOnFail = false;\n    }\n\n    toString() {\n        if (\n            BigNumber.isInstance(this.memoryLength) &&\n            this.memoryLength.isZero() &&\n            BigNumber.isInstance(this.outputLength) &&\n            this.outputLength.isZero()\n        ) {\n            if (\n                this.gas.name === 'MUL' &&\n                this.gas.left.name === 'ISZERO' &&\n                BigNumber.isInstance(this.gas.right) &&\n                this.gas.right.equals(2300)\n            ) {\n                if (this.throwOnFail) {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').transfer(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                } else {\n                    return (\n                        'address(' +\n                        stringify(this.address) +\n                        ').send(' +\n                        stringify(this.value) +\n                        ')'\n                    );\n                }\n            } else {\n                return (\n                    'address(' +\n                    stringify(this.address) +\n                    ').call.gas(' +\n                    stringify(this.gas) +\n                    ').value(' +\n                    stringify(this.value) +\n                    ')'\n                );\n            }\n        } else {\n            return (\n                'call(' +\n                stringify(this.gas) +\n                ',' +\n                stringify(this.address) +\n                ',' +\n                stringify(this.value) +\n                ',' +\n                stringify(this.memoryStart) +\n                ',' +\n                stringify(this.memoryLength) +\n                ',' +\n                stringify(this.outputStart) +\n                ',' +\n                stringify(this.outputLength) +\n                ')'\n            );\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new CALL(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\n    );\n    state.memory[outputStart] = 'output';\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CALLCODE {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly value: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        value: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'CALLCODE';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.value = value;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'callcode(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.value) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new CALLCODE(gas, address, value, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { MLOAD } from './mload';\nimport { hex2a } from '../utils/hex';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class RETURN {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'RETURN';\n        this.wrapped = true;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.memoryStart && this.memoryLength) {\n            return (\n                'return memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')];'\n            );\n        } else if (this.items.length === 0) {\n            return 'return;';\n        } else if (\n            this.items.length === 1 &&\n            (BigNumber.isInstance(this.items[0]) || this.items[0].static)\n        ) {\n            return 'return ' + this.items[0] + ';';\n        } else if (\n            this.items.length === 3 &&\n            this.items.every((item: any) => BigNumber.isInstance(item)) &&\n            this.items[0].equals(32)\n        ) {\n            return 'return \"' + hex2a(this.items[2].toString(16)) + '\";';\n        } else {\n            return 'return(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.halted = true;\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\n        const items = [];\n        for (\n            let i = memoryStart.toJSNumber();\n            i < memoryStart.add(memoryLength).toJSNumber();\n            i += 32\n        ) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.instructions.push(new RETURN(items));\n    } else {\n        state.instructions.push(new RETURN([], memoryStart, memoryLength));\n    }\n};\n","export function hex2a(hexx: any) {\n    const hex = hexx.toString();\n    let str = '';\n    for (let i = 0; i < hex.length && hex.substr(i, 2) !== '00'; i += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n    }\n    return str;\n}\n\nexport function pad32(data: string) {\n    if (data.length >= 64) {\n        return data;\n    } else {\n        return '0'.repeat(64 - data.length) + data;\n    }\n}\n\nexport function isHex(h: any) {\n    return /^[0-9a-f-]+$/.test(h);\n}\n\nexport default (data: any) => {\n    if (isHex(data)) {\n        const pieces = data.match(/.{1,64}/g);\n        if (pieces.length === 3 && parseInt(pieces[0], 16) === 32) {\n            const stringLength = parseInt(pieces[1], 16) * 2;\n            const stringData = hex2a(pieces[2].substr(0, stringLength));\n            return '\"' + stringData + '\"';\n        } else if (!isNaN(parseInt(data, 16))) {\n            return parseInt(data, 16).toString();\n        } else {\n            return data;\n        }\n    } else {\n        return data;\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class DELEGATECALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'DELEGATECALL';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'delegatecall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new DELEGATECALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class CREATE2 {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly value: any;\n\n    constructor(memoryStart: any, memoryLength: any, value: any) {\n        this.name = 'CREATE2';\n        this.wrapped = true;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.value = value;\n    }\n\n    toString() {\n        return (\n            '(new Contract(memory[' +\n            stringify(this.memoryStart) +\n            ':(' +\n            stringify(this.memoryStart) +\n            '+' +\n            stringify(this.memoryLength) +\n            ')]).value(' +\n            stringify(this.value) +\n            ')).address'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const value = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.stack.push(new CREATE2(memoryStart, memoryLength, value));\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class STATICCALL {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly gas: any;\n    readonly address: any;\n    readonly memoryStart: any;\n    readonly memoryLength: any;\n    readonly outputStart: any;\n    readonly outputLength: any;\n\n    constructor(\n        gas: any,\n        address: any,\n        memoryStart: any,\n        memoryLength: any,\n        outputStart: any,\n        outputLength: any\n    ) {\n        this.name = 'STATICCALL';\n        this.wrapped = true;\n        this.gas = gas;\n        this.address = address;\n        this.memoryStart = memoryStart;\n        this.memoryLength = memoryLength;\n        this.outputStart = outputStart;\n        this.outputLength = outputLength;\n    }\n\n    toString() {\n        return (\n            'staticcall(' +\n            stringify(this.gas) +\n            ',' +\n            stringify(this.address) +\n            ',' +\n            stringify(this.memoryStart) +\n            ',' +\n            stringify(this.memoryLength) +\n            ',' +\n            stringify(this.outputStart) +\n            ',' +\n            stringify(this.outputLength) +\n            ')'\n        );\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const gas = state.stack.pop();\n    const address = state.stack.pop();\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    const outputStart = state.stack.pop();\n    const outputLength = state.stack.pop();\n    state.stack.push(\n        new STATICCALL(gas, address, memoryStart, memoryLength, outputStart, outputLength)\n    );\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport { MLOAD } from './mload';\nimport * as BigNumber from '../../node_modules/big-integer';\nimport stringify from '../utils/stringify';\n\nexport class REVERT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly memoryStart?: any;\n    readonly memoryLength?: any;\n    readonly items: any;\n\n    constructor(items: any, memoryStart?: any, memoryLength?: any) {\n        this.name = 'REVERT';\n        this.wrapped = true;\n        if (memoryStart && memoryLength) {\n            this.memoryStart = memoryStart;\n            this.memoryLength = memoryLength;\n        } else {\n            this.items = items;\n        }\n    }\n\n    toString() {\n        if (this.items) {\n            return 'revert(' + this.items.map((item: any) => stringify(item)).join(', ') + ');';\n        } else {\n            return (\n                'revert(memory[' +\n                stringify(this.memoryStart) +\n                ':(' +\n                stringify(this.memoryStart) +\n                '+' +\n                stringify(this.memoryLength) +\n                ')]);'\n            );\n        }\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const memoryStart = state.stack.pop();\n    const memoryLength = state.stack.pop();\n    state.halted = true;\n    if (BigNumber.isInstance(memoryStart) && BigNumber.isInstance(memoryLength)) {\n        const items = [];\n        for (\n            let i = memoryStart.toJSNumber();\n            i < memoryStart.add(memoryLength).toJSNumber();\n            i += 32\n        ) {\n            if (i in state.memory) {\n                items.push(state.memory[i]);\n            } else {\n                items.push(new MLOAD(i));\n            }\n        }\n        state.instructions.push(new REVERT(items));\n    } else {\n        state.instructions.push(new REVERT([], memoryStart, memoryLength));\n    }\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\n\nexport class INVALID {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly opcode: any;\n\n    constructor(opcode: any) {\n        this.name = 'INVALID';\n        this.wrapped = true;\n        this.opcode = opcode;\n    }\n\n    toString() {\n        return 'revert(\"Invalid instruction (0x' + this.opcode.toString(16) + ')\");';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    state.halted = true;\n    state.instructions.push(new INVALID(opcode.opcode));\n};\n","import EVM from '../classes/evm.class';\nimport Opcode from '../interfaces/opcode.interface';\nimport stringify from '../utils/stringify';\n\nexport class SELFDESTRUCT {\n    readonly name: string;\n    readonly type?: string;\n    readonly wrapped: boolean;\n    readonly address: any;\n\n    constructor(address: any) {\n        this.name = 'SELFDESTRUCT';\n        this.wrapped = true;\n        this.address = address;\n    }\n\n    toString() {\n        return 'selfdestruct(' + stringify(this.address) + ');';\n    }\n}\n\nexport default (opcode: Opcode, state: EVM): void => {\n    const address = state.stack.pop();\n    state.halted = true;\n    state.instructions.push(new SELFDESTRUCT(address));\n};\n","export default (stateEvents: any, events: string[]) => {\n    const stateEventValues = Object.keys(stateEvents).map((key: string) => stateEvents[key]);\n    let output = '';\n\n    events.forEach((event: string) => {\n        const eventName = event.split('(')[0];\n        const eventArguments = event\n            .replace(eventName, '')\n            .substring(1)\n            .slice(0, -1);\n        output += 'event ';\n        if (eventArguments) {\n            output += eventName + '(';\n            output += eventArguments\n                .split(',')\n                .map((a: string, i: number) => {\n                    const stateEvent = stateEventValues.find((e: any) => e.label === event);\n                    if (stateEvent && i < stateEvent.indexedCount) {\n                        return a + ' indexed _arg' + i;\n                    } else {\n                        return a + ' _arg' + i;\n                    }\n                })\n                .join(', ');\n            output += ');';\n        } else {\n            output += event;\n        }\n        output += '\\n';\n    });\n\n    if (events.length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","export default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings)\n        .filter((key: any) => mappings[key].structs.length > 0)\n        .forEach((key: string, index: number) => {\n            const mapping = mappings[key];\n            output += 'struct ' + mapping.name + 'Struct {\\n';\n            mapping.structs.forEach((struct: any) => {\n                output += '    ' + struct.toString() + ';\\n';\n            });\n            output += '}\\n\\n';\n        });\n\n    return output;\n};\n","const stringifyMapping = (mapping: any) => {\n    const mappingKey: string[] = [];\n    const mappingValue: string[] = [];\n    let deepMapping = false;\n    mapping.keys\n        .filter((mappingChild: any) => mappingChild.length > 0)\n        .forEach((mappingChild: any) => {\n            if (\n                mappingChild.length > 0 &&\n                mappingChild[0].type &&\n                !mappingKey.includes(mappingChild[0].type)\n            ) {\n                mappingKey.push(mappingChild[0].type);\n            }\n            if (mappingChild.length > 1 && !deepMapping) {\n                deepMapping = true;\n                mappingValue.push(\n                    stringifyMapping({\n                        name: mapping.name,\n                        structs: mapping.structs,\n                        keys: mapping.keys.map((items: any) => {\n                            items.shift();\n                            return items;\n                        }),\n                        values: mapping.values\n                    })\n                );\n            } else if (mappingChild.length === 1 && !deepMapping) {\n                mapping.values.forEach((mappingChild2: any) => {\n                    if (mappingChild2.type && !mappingValue.includes(mappingChild2.type)) {\n                        mappingValue.push(mappingChild2.type);\n                    }\n                });\n            }\n        });\n    if (mappingKey.length === 0) {\n        mappingKey.push('unknown');\n    }\n    if (mapping.structs.length > 0 && mappingValue.length === 0) {\n        mappingValue.push(mapping.name + 'Struct');\n    } else if (mappingValue.length === 0) {\n        mappingValue.push('unknown');\n    }\n    return 'mapping (' + mappingKey.join('|') + ' => ' + mappingValue.join('|') + ')';\n};\n\nexport default (mappings: any) => {\n    let output = '';\n\n    Object.keys(mappings).forEach((key: string, index: number) => {\n        const mapping = mappings[key];\n        if (mapping.name) {\n            output += stringifyMapping(mapping) + ' public ' + mapping.name + ';';\n        } else {\n            output += stringifyMapping(mapping) + ' mapping' + (index + 1) + ';';\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(mappings).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","export default (variables: any) => {\n    let output = '';\n\n    Object.keys(variables).forEach((key: string, index: number) => {\n        const variable = variables[key];\n        const types = variable.types\n            .map((type: any) => {\n                if (typeof type === 'function') {\n                    return type();\n                } else {\n                    return type;\n                }\n            })\n            .filter((type: any) => type);\n        if (types.length === 0) {\n            types.push('unknown');\n        }\n        if (variable.label) {\n            output += [...new Set(types)].join('|') + ' public ' + variable.label + ';';\n        } else {\n            output += [...new Set(types)].join('|') + ' var' + (index + 1).toString() + ';';\n            index++;\n        }\n        output += '\\n';\n    });\n\n    if (Object.keys(variables).length > 0) {\n        output += '\\n';\n    }\n\n    return output;\n};\n","import stringifyInstructions from './stringifyInstructions';\nimport * as functionHashes from '../../data/functionHashes.json';\n\nexport default (functionName: string, functionInstance: any): string => {\n    let output = '';\n    output += 'function ';\n    if (functionName in functionHashes) {\n        const fullFunction = (functionHashes as any)[functionName];\n        const fullFunctionName = fullFunction.split('(')[0];\n        const fullFunctionArguments = fullFunction\n            .replace(fullFunctionName, '')\n            .substring(1)\n            .slice(0, -1);\n        if (fullFunctionArguments) {\n            output += fullFunctionName + '(';\n            output += fullFunctionArguments\n                .split(',')\n                .map((a: string, i: number) => a + ' _arg' + i)\n                .join(', ');\n            output += ')';\n        } else {\n            output += fullFunction;\n        }\n    } else {\n        output += functionName + '()';\n    }\n    output += ' ' + functionInstance.visibility;\n    if (functionInstance.constant) {\n        output += ' view';\n    }\n    if (functionInstance.payable) {\n        output += ' payable';\n    }\n    if (functionInstance.returns.length > 0) {\n        output += ' returns (' + functionInstance.returns.join(', ') + ')';\n    }\n    output += ' {\\n';\n    output += stringifyInstructions(functionInstance.items, 4);\n    output += '}\\n\\n';\n    return output;\n};\n","export default class Stack {\n    elements: any[];\n\n    constructor() {\n        this.elements = [];\n    }\n\n    push(item: any): void {\n        if (this.elements.length >= 1024) {\n            throw new Error('Stack too deep');\n        } else {\n            this.elements.unshift(item);\n        }\n    }\n\n    pop(): any {\n        if (this.elements.length === 0) {\n            throw new Error('POP with empty stack');\n        } else {\n            return this.elements.shift();\n        }\n    }\n\n    duplicate(position: number): void {\n        if (position < 0 || position > 15) {\n            throw new Error('Unsupported position for duplication operation');\n        } else if (!(position in this.elements)) {\n            throw new Error(\n                \"Invalid duplication operation, provided position wasn't found in stack\"\n            );\n        } else {\n            this.push(this.elements[position]);\n        }\n    }\n\n    swap(secondPosition: number): void {\n        if (secondPosition < 1 || secondPosition > 16) {\n            throw new Error('Unsupported position for swap operation');\n        } else if (!(secondPosition in this.elements)) {\n            throw new Error(\"Invalid swap operation, provided position wasn't found in stack\");\n        } else {\n            const firstValue = this.elements[0];\n            const secondValue = this.elements[secondPosition];\n            this.elements[0] = secondValue;\n            this.elements[secondPosition] = firstValue;\n        }\n    }\n\n    clone(): Stack {\n        const stack = new Stack();\n        stack.elements = [...this.elements];\n        return stack;\n    }\n\n    reset(): void {\n        this.elements = [];\n    }\n}\n"],"sourceRoot":""}